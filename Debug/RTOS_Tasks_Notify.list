
RTOS_Tasks_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a8  080046a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080046a8  080046a8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046a8  080046a8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046ac  080046ac  000146ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080046b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000174cc  2000007c  0800472c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017548  0800472c  00027548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2dd  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ac8  00000000  00000000  0002d389  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f8  00000000  00000000  0002f928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012d18  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094ab  00000000  00000000  00043038  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071938  00000000  00000000  0004c4e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bde1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003150  00000000  00000000  000bde98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044ec 	.word	0x080044ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080044ec 	.word	0x080044ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

char usr_msg[250] = { 0 };
uint32_t notification_value = 0;

int main(void)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
	RCC_DeInit();
 8000286:	f000 fb19 	bl	80008bc <RCC_DeInit>

	SystemCoreClockUpdate();
 800028a:	f000 f971 	bl	8000570 <SystemCoreClockUpdate>

	prvSetupHardware();
 800028e:	f000 f901 	bl	8000494 <prvSetupHardware>

	sprintf(usr_msg, "This is Demo of Task Notify APIs\r\n");
 8000292:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <main+0x70>)
 8000294:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <main+0x74>)
 8000296:	4614      	mov	r4, r2
 8000298:	461d      	mov	r5, r3
 800029a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a2:	682b      	ldr	r3, [r5, #0]
 80002a4:	461a      	mov	r2, r3
 80002a6:	8022      	strh	r2, [r4, #0]
 80002a8:	3402      	adds	r4, #2
 80002aa:	0c1b      	lsrs	r3, r3, #16
 80002ac:	7023      	strb	r3, [r4, #0]
	printmsg(usr_msg);
 80002ae:	4810      	ldr	r0, [pc, #64]	; (80002f0 <main+0x70>)
 80002b0:	f000 f8f8 	bl	80004a4 <printmsg>

	SEGGER_SYSVIEW_Conf();
 80002b4:	f002 f80a 	bl	80022cc <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80002b8:	f002 fef2 	bl	80030a0 <SEGGER_SYSVIEW_Start>

	xTaskCreate(vtask_led_handler, "TASK-LED", 500, NULL, 2, &xTaskHandle1);
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <main+0x78>)
 80002be:	9301      	str	r3, [sp, #4]
 80002c0:	2302      	movs	r3, #2
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	2300      	movs	r3, #0
 80002c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002ca:	490c      	ldr	r1, [pc, #48]	; (80002fc <main+0x7c>)
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <main+0x80>)
 80002ce:	f000 fdd1 	bl	8000e74 <xTaskCreate>

	xTaskCreate(vtask_button_handler, "TASK-BUTTON", 500, NULL, 2, &xTaskHandle2);
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <main+0x84>)
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2302      	movs	r3, #2
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2300      	movs	r3, #0
 80002dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002e0:	4909      	ldr	r1, [pc, #36]	; (8000308 <main+0x88>)
 80002e2:	480a      	ldr	r0, [pc, #40]	; (800030c <main+0x8c>)
 80002e4:	f000 fdc6 	bl	8000e74 <xTaskCreate>

	vTaskStartScheduler();
 80002e8:	f000 ff24 	bl	8001134 <vTaskStartScheduler>

	for(;;);
 80002ec:	e7fe      	b.n	80002ec <main+0x6c>
 80002ee:	bf00      	nop
 80002f0:	200000a0 	.word	0x200000a0
 80002f4:	08004504 	.word	0x08004504
 80002f8:	20000098 	.word	0x20000098
 80002fc:	08004528 	.word	0x08004528
 8000300:	08000311 	.word	0x08000311
 8000304:	2000009c 	.word	0x2000009c
 8000308:	08004534 	.word	0x08004534
 800030c:	0800035d 	.word	0x0800035d

08000310 <vtask_led_handler>:

}

void vtask_led_handler(void *params)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	uint32_t current_notification_value = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		if(xTaskNotifyWait(0, 0, &current_notification_value, portMAX_DELAY) == pdTRUE)
 800031c:	f107 020c 	add.w	r2, r7, #12
 8000320:	f04f 33ff 	mov.w	r3, #4294967295
 8000324:	2100      	movs	r1, #0
 8000326:	2000      	movs	r0, #0
 8000328:	f001 fa02 	bl	8001730 <xTaskNotifyWait>
 800032c:	4603      	mov	r3, r0
 800032e:	2b01      	cmp	r3, #1
 8000330:	d1f4      	bne.n	800031c <vtask_led_handler+0xc>
		{
			GPIO_ToggleBits(GPIOD, GPIO_Pin_15);
 8000332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000336:	4806      	ldr	r0, [pc, #24]	; (8000350 <vtask_led_handler+0x40>)
 8000338:	f000 fa65 	bl	8000806 <GPIO_ToggleBits>
			sprintf(usr_msg, "Notification is received : Button press count : %ld\r\n", current_notification_value);
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	461a      	mov	r2, r3
 8000340:	4904      	ldr	r1, [pc, #16]	; (8000354 <vtask_led_handler+0x44>)
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <vtask_led_handler+0x48>)
 8000344:	f003 fcc8 	bl	8003cd8 <siprintf>
			printmsg(usr_msg);
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <vtask_led_handler+0x48>)
 800034a:	f000 f8ab 	bl	80004a4 <printmsg>
		if(xTaskNotifyWait(0, 0, &current_notification_value, portMAX_DELAY) == pdTRUE)
 800034e:	e7e5      	b.n	800031c <vtask_led_handler+0xc>
 8000350:	40020c00 	.word	0x40020c00
 8000354:	08004540 	.word	0x08004540
 8000358:	200000a0 	.word	0x200000a0

0800035c <vtask_button_handler>:
		}
	}
}

void vtask_button_handler(void *params)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 8000364:	2101      	movs	r1, #1
 8000366:	4808      	ldr	r0, [pc, #32]	; (8000388 <vtask_button_handler+0x2c>)
 8000368:	f000 fa33 	bl	80007d2 <GPIO_ReadInputDataBit>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f8      	beq.n	8000364 <vtask_button_handler+0x8>
		{
			rtos_delay(100);
 8000372:	2064      	movs	r0, #100	; 0x64
 8000374:	f000 f8c6 	bl	8000504 <rtos_delay>

			xTaskNotify(xTaskHandle1, 0x00, eIncrement);
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <vtask_button_handler+0x30>)
 800037a:	6818      	ldr	r0, [r3, #0]
 800037c:	2300      	movs	r3, #0
 800037e:	2202      	movs	r2, #2
 8000380:	2100      	movs	r1, #0
 8000382:	f001 fa39 	bl	80017f8 <xTaskGenericNotify>
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 8000386:	e7ed      	b.n	8000364 <vtask_button_handler+0x8>
 8000388:	40020000 	.word	0x40020000
 800038c:	20000098 	.word	0x20000098

08000390 <prvSetupUart>:
		}
	}
}

static void prvSetupUart(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_UART_Pin;
	USART_InitTypeDef UART2_Init;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000396:	2101      	movs	r1, #1
 8000398:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800039c:	f000 fb8e 	bl	8000abc <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80003a0:	2101      	movs	r1, #1
 80003a2:	2001      	movs	r0, #1
 80003a4:	f000 fb6a 	bl	8000a7c <RCC_AHB1PeriphClockCmd>

	memset(&GPIO_UART_Pin, 0, sizeof(GPIO_UART_Pin));
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	2208      	movs	r2, #8
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f003 fc89 	bl	8003cc8 <memset>

	GPIO_UART_Pin.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80003b6:	230c      	movs	r3, #12
 80003b8:	613b      	str	r3, [r7, #16]
	GPIO_UART_Pin.GPIO_Mode = GPIO_Mode_AF;
 80003ba:	2302      	movs	r3, #2
 80003bc:	753b      	strb	r3, [r7, #20]
	GPIO_UART_Pin.GPIO_PuPd = GPIO_PuPd_UP;
 80003be:	2301      	movs	r3, #1
 80003c0:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_UART_Pin);
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	4816      	ldr	r0, [pc, #88]	; (8000424 <prvSetupUart+0x94>)
 80003ca:	f000 f974 	bl	80006b6 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 80003ce:	2207      	movs	r2, #7
 80003d0:	2102      	movs	r1, #2
 80003d2:	4814      	ldr	r0, [pc, #80]	; (8000424 <prvSetupUart+0x94>)
 80003d4:	f000 fa29 	bl	800082a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 80003d8:	2207      	movs	r2, #7
 80003da:	2103      	movs	r1, #3
 80003dc:	4811      	ldr	r0, [pc, #68]	; (8000424 <prvSetupUart+0x94>)
 80003de:	f000 fa24 	bl	800082a <GPIO_PinAFConfig>

	memset(&UART2_Init, 0, sizeof(UART2_Init));
 80003e2:	463b      	mov	r3, r7
 80003e4:	2210      	movs	r2, #16
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f003 fc6d 	bl	8003cc8 <memset>

	UART2_Init.USART_BaudRate = 115200;
 80003ee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80003f2:	603b      	str	r3, [r7, #0]
	UART2_Init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80003f4:	2300      	movs	r3, #0
 80003f6:	81bb      	strh	r3, [r7, #12]
	UART2_Init.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80003f8:	230c      	movs	r3, #12
 80003fa:	817b      	strh	r3, [r7, #10]
	UART2_Init.USART_Parity = USART_Parity_No;
 80003fc:	2300      	movs	r3, #0
 80003fe:	813b      	strh	r3, [r7, #8]
	UART2_Init.USART_StopBits = USART_StopBits_1;
 8000400:	2300      	movs	r3, #0
 8000402:	80fb      	strh	r3, [r7, #6]
	UART2_Init.USART_WordLength = USART_WordLength_8b;
 8000404:	2300      	movs	r3, #0
 8000406:	80bb      	strh	r3, [r7, #4]
	USART_Init(USART2, &UART2_Init);
 8000408:	463b      	mov	r3, r7
 800040a:	4619      	mov	r1, r3
 800040c:	4806      	ldr	r0, [pc, #24]	; (8000428 <prvSetupUart+0x98>)
 800040e:	f000 fb75 	bl	8000afc <USART_Init>

	USART_Cmd(USART2, ENABLE);
 8000412:	2101      	movs	r1, #1
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <prvSetupUart+0x98>)
 8000416:	f000 fc2b 	bl	8000c70 <USART_Cmd>
}
 800041a:	bf00      	nop
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40020000 	.word	0x40020000
 8000428:	40004400 	.word	0x40004400

0800042c <prvSetupGPIO>:

void prvSetupGPIO(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000432:	2101      	movs	r1, #1
 8000434:	2008      	movs	r0, #8
 8000436:	f000 fb21 	bl	8000a7c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800043a:	2101      	movs	r1, #1
 800043c:	2001      	movs	r0, #1
 800043e:	f000 fb1d 	bl	8000a7c <RCC_AHB1PeriphClockCmd>
//	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	GPIO_InitTypeDef LedInit, ButtonInit;
	LedInit.GPIO_Mode = GPIO_Mode_OUT;
 8000442:	2301      	movs	r3, #1
 8000444:	733b      	strb	r3, [r7, #12]
	LedInit.GPIO_OType = GPIO_OType_PP;
 8000446:	2300      	movs	r3, #0
 8000448:	73bb      	strb	r3, [r7, #14]
	LedInit.GPIO_Pin = GPIO_Pin_15;
 800044a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800044e:	60bb      	str	r3, [r7, #8]
	LedInit.GPIO_Speed = GPIO_Low_Speed;
 8000450:	2300      	movs	r3, #0
 8000452:	737b      	strb	r3, [r7, #13]
	LedInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOD, &LedInit);
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	4619      	mov	r1, r3
 800045e:	480b      	ldr	r0, [pc, #44]	; (800048c <prvSetupGPIO+0x60>)
 8000460:	f000 f929 	bl	80006b6 <GPIO_Init>

	ButtonInit.GPIO_Mode = GPIO_Mode_IN;
 8000464:	2300      	movs	r3, #0
 8000466:	713b      	strb	r3, [r7, #4]
	ButtonInit.GPIO_OType = GPIO_OType_PP;
 8000468:	2300      	movs	r3, #0
 800046a:	71bb      	strb	r3, [r7, #6]
	ButtonInit.GPIO_Pin = GPIO_Pin_0;
 800046c:	2301      	movs	r3, #1
 800046e:	603b      	str	r3, [r7, #0]
	ButtonInit.GPIO_Speed = GPIO_Low_Speed;
 8000470:	2300      	movs	r3, #0
 8000472:	717b      	strb	r3, [r7, #5]
	ButtonInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &ButtonInit);
 8000478:	463b      	mov	r3, r7
 800047a:	4619      	mov	r1, r3
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <prvSetupGPIO+0x64>)
 800047e:	f000 f91a 	bl	80006b6 <GPIO_Init>
//
//	EXTI_Init(&ExtiInit);
//
//	NVIC_SetPriority(EXTI0_IRQn, 5);
//	NVIC_EnableIRQ(EXTI0_IRQn);
}
 8000482:	bf00      	nop
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40020c00 	.word	0x40020c00
 8000490:	40020000 	.word	0x40020000

08000494 <prvSetupHardware>:

static void prvSetupHardware(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	prvSetupGPIO();
 8000498:	f7ff ffc8 	bl	800042c <prvSetupGPIO>
	prvSetupUart();
 800049c:	f7ff ff78 	bl	8000390 <prvSetupUart>
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <printmsg>:

void printmsg(char *msg)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < strlen(msg); i++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	e013      	b.n	80004da <printmsg+0x36>
	{
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) != SET);
 80004b2:	bf00      	nop
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	4812      	ldr	r0, [pc, #72]	; (8000500 <printmsg+0x5c>)
 80004b8:	f000 fc0c 	bl	8000cd4 <USART_GetFlagStatus>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d1f8      	bne.n	80004b4 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	4413      	add	r3, r2
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	4619      	mov	r1, r3
 80004ce:	480c      	ldr	r0, [pc, #48]	; (8000500 <printmsg+0x5c>)
 80004d0:	f000 fbee 	bl	8000cb0 <USART_SendData>
	for(uint32_t i = 0; i < strlen(msg); i++)
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	3301      	adds	r3, #1
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff fe78 	bl	80001d0 <strlen>
 80004e0:	4602      	mov	r2, r0
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d3e4      	bcc.n	80004b2 <printmsg+0xe>
	}

	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) != SET);
 80004e8:	bf00      	nop
 80004ea:	2140      	movs	r1, #64	; 0x40
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <printmsg+0x5c>)
 80004ee:	f000 fbf1 	bl	8000cd4 <USART_GetFlagStatus>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d1f8      	bne.n	80004ea <printmsg+0x46>
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40004400 	.word	0x40004400

08000504 <rtos_delay>:

void rtos_delay(uint32_t delay_in_ms)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	uint32_t current_tick_count = xTaskGetTickCount();
 800050c:	f000 ff16 	bl	800133c <xTaskGetTickCount>
 8000510:	60f8      	str	r0, [r7, #12]

	//xTicksToWait = (xTimeInMs * configTICK_RATE_HZ)/1000
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ) / 1000;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000518:	fb02 f303 	mul.w	r3, r2, r3
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <rtos_delay+0x3c>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	099b      	lsrs	r3, r3, #6
 8000524:	60bb      	str	r3, [r7, #8]

	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks));
 8000526:	bf00      	nop
 8000528:	f000 ff08 	bl	800133c <xTaskGetTickCount>
 800052c:	4601      	mov	r1, r0
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	4413      	add	r3, r2
 8000534:	4299      	cmp	r1, r3
 8000536:	d3f7      	bcc.n	8000528 <rtos_delay+0x24>
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	10624dd3 	.word	0x10624dd3

08000544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <SystemInit+0x28>)
 800054a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <SystemInit+0x28>)
 8000550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <SystemInit+0x28>)
 800055a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800055e:	609a      	str	r2, [r3, #8]
#endif
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	2302      	movs	r3, #2
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	2302      	movs	r3, #2
 8000588:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800058a:	4b31      	ldr	r3, [pc, #196]	; (8000650 <SystemCoreClockUpdate+0xe0>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f003 030c 	and.w	r3, r3, #12
 8000592:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	2b04      	cmp	r3, #4
 8000598:	d007      	beq.n	80005aa <SystemCoreClockUpdate+0x3a>
 800059a:	2b08      	cmp	r3, #8
 800059c:	d009      	beq.n	80005b2 <SystemCoreClockUpdate+0x42>
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d13d      	bne.n	800061e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80005a2:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <SystemCoreClockUpdate+0xe4>)
 80005a4:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <SystemCoreClockUpdate+0xe8>)
 80005a6:	601a      	str	r2, [r3, #0]
      break;
 80005a8:	e03d      	b.n	8000626 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80005aa:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <SystemCoreClockUpdate+0xe4>)
 80005ac:	4a2b      	ldr	r2, [pc, #172]	; (800065c <SystemCoreClockUpdate+0xec>)
 80005ae:	601a      	str	r2, [r3, #0]
      break;
 80005b0:	e039      	b.n	8000626 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005b2:	4b27      	ldr	r3, [pc, #156]	; (8000650 <SystemCoreClockUpdate+0xe0>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	0d9b      	lsrs	r3, r3, #22
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <SystemCoreClockUpdate+0xe0>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005c6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d00c      	beq.n	80005e8 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <SystemCoreClockUpdate+0xec>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <SystemCoreClockUpdate+0xe0>)
 80005d8:	6852      	ldr	r2, [r2, #4]
 80005da:	0992      	lsrs	r2, r2, #6
 80005dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	e00b      	b.n	8000600 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <SystemCoreClockUpdate+0xe8>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <SystemCoreClockUpdate+0xe0>)
 80005f2:	6852      	ldr	r2, [r2, #4]
 80005f4:	0992      	lsrs	r2, r2, #6
 80005f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <SystemCoreClockUpdate+0xe0>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	0c1b      	lsrs	r3, r3, #16
 8000606:	f003 0303 	and.w	r3, r3, #3
 800060a:	3301      	adds	r3, #1
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	fbb2 f3f3 	udiv	r3, r2, r3
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <SystemCoreClockUpdate+0xe4>)
 800061a:	6013      	str	r3, [r2, #0]
      break;
 800061c:	e003      	b.n	8000626 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <SystemCoreClockUpdate+0xe4>)
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <SystemCoreClockUpdate+0xe8>)
 8000622:	601a      	str	r2, [r3, #0]
      break;
 8000624:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <SystemCoreClockUpdate+0xe0>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	091b      	lsrs	r3, r3, #4
 800062c:	f003 030f 	and.w	r3, r3, #15
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <SystemCoreClockUpdate+0xf0>)
 8000632:	5cd3      	ldrb	r3, [r2, r3]
 8000634:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <SystemCoreClockUpdate+0xe4>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	fa22 f303 	lsr.w	r3, r2, r3
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <SystemCoreClockUpdate+0xe4>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	371c      	adds	r7, #28
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40023800 	.word	0x40023800
 8000654:	20000000 	.word	0x20000000
 8000658:	00f42400 	.word	0x00f42400
 800065c:	017d7840 	.word	0x017d7840
 8000660:	08004650 	.word	0x08004650

08000664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800069c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000668:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800066a:	e003      	b.n	8000674 <LoopCopyDataInit>

0800066c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800066e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000670:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000672:	3104      	adds	r1, #4

08000674 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000678:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800067a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800067c:	d3f6      	bcc.n	800066c <CopyDataInit>
  ldr  r2, =_sbss
 800067e:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000680:	e002      	b.n	8000688 <LoopFillZerobss>

08000682 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000682:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000684:	f842 3b04 	str.w	r3, [r2], #4

08000688 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800068a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800068c:	d3f9      	bcc.n	8000682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800068e:	f7ff ff59 	bl	8000544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000692:	f003 fadb 	bl	8003c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000696:	f7ff fdf3 	bl	8000280 <main>
  bx  lr    
 800069a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800069c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80006a0:	080046b0 	.word	0x080046b0
  ldr  r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006a8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80006ac:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80006b0:	20017548 	.word	0x20017548

080006b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC_IRQHandler>

080006b6 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b087      	sub	sp, #28
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	e076      	b.n	80007c0 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006d2:	2201      	movs	r2, #1
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	4013      	ands	r3, r2
 80006e4:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d165      	bne.n	80007ba <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	2103      	movs	r1, #3
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	401a      	ands	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	4619      	mov	r1, r3
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	431a      	orrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d003      	beq.n	800072c <GPIO_Init+0x76>
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d12e      	bne.n	800078a <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	689a      	ldr	r2, [r3, #8]
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	2103      	movs	r1, #3
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43db      	mvns	r3, r3
 800073c:	401a      	ands	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	689a      	ldr	r2, [r3, #8]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	4619      	mov	r1, r3
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	fa01 f303 	lsl.w	r3, r1, r3
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685a      	ldr	r2, [r3, #4]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	b29b      	uxth	r3, r3
 8000762:	4619      	mov	r1, r3
 8000764:	2301      	movs	r3, #1
 8000766:	408b      	lsls	r3, r1
 8000768:	43db      	mvns	r3, r3
 800076a:	401a      	ands	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	7992      	ldrb	r2, [r2, #6]
 8000778:	4611      	mov	r1, r2
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	b292      	uxth	r2, r2
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	b292      	uxth	r2, r2
 8000784:	431a      	orrs	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	b29b      	uxth	r3, r3
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	2103      	movs	r1, #3
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	401a      	ands	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	68da      	ldr	r2, [r3, #12]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	79db      	ldrb	r3, [r3, #7]
 80007aa:	4619      	mov	r1, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	3301      	adds	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	2b0f      	cmp	r3, #15
 80007c4:	d985      	bls.n	80006d2 <GPIO_Init+0x1c>
    }
  }
}
 80007c6:	bf00      	nop
 80007c8:	371c      	adds	r7, #28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b085      	sub	sp, #20
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80007de:	2300      	movs	r3, #0
 80007e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	691a      	ldr	r2, [r3, #16]
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	4013      	ands	r3, r2
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	e001      	b.n	80007f8 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	460b      	mov	r3, r1
 8000810:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	405a      	eors	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	615a      	str	r2, [r3, #20]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800082a:	b480      	push	{r7}
 800082c:	b085      	sub	sp, #20
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	460b      	mov	r3, r1
 8000834:	807b      	strh	r3, [r7, #2]
 8000836:	4613      	mov	r3, r2
 8000838:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000842:	787a      	ldrb	r2, [r7, #1]
 8000844:	887b      	ldrh	r3, [r7, #2]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000852:	887b      	ldrh	r3, [r7, #2]
 8000854:	08db      	lsrs	r3, r3, #3
 8000856:	b29b      	uxth	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3208      	adds	r2, #8
 800085e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000862:	887b      	ldrh	r3, [r7, #2]
 8000864:	f003 0307 	and.w	r3, r3, #7
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	210f      	movs	r1, #15
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	8879      	ldrh	r1, [r7, #2]
 8000874:	08c9      	lsrs	r1, r1, #3
 8000876:	b289      	uxth	r1, r1
 8000878:	4608      	mov	r0, r1
 800087a:	ea02 0103 	and.w	r1, r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f100 0208 	add.w	r2, r0, #8
 8000884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000888:	887b      	ldrh	r3, [r7, #2]
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	b29b      	uxth	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3208      	adds	r2, #8
 8000894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	4313      	orrs	r3, r2
 800089c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800089e:	887b      	ldrh	r3, [r7, #2]
 80008a0:	08db      	lsrs	r3, r3, #3
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3208      	adds	r2, #8
 80008aa:	68b9      	ldr	r1, [r7, #8]
 80008ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <RCC_DeInit+0x60>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a15      	ldr	r2, [pc, #84]	; (800091c <RCC_DeInit+0x60>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <RCC_DeInit+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <RCC_DeInit+0x60>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a11      	ldr	r2, [pc, #68]	; (800091c <RCC_DeInit+0x60>)
 80008d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008e0:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <RCC_DeInit+0x60>)
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <RCC_DeInit+0x64>)
 80008e6:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <RCC_DeInit+0x60>)
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <RCC_DeInit+0x68>)
 80008ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <RCC_DeInit+0x60>)
 80008f2:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <RCC_DeInit+0x6c>)
 80008f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <RCC_DeInit+0x60>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <RCC_DeInit+0x60>)
 80008fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000902:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <RCC_DeInit+0x60>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <RCC_DeInit+0x60>)
 800090c:	2200      	movs	r2, #0
 800090e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	40023800 	.word	0x40023800
 8000920:	24003010 	.word	0x24003010
 8000924:	20003000 	.word	0x20003000
 8000928:	24003000 	.word	0x24003000

0800092c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	2302      	movs	r3, #2
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	2302      	movs	r3, #2
 800094a:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800094c:	4b47      	ldr	r3, [pc, #284]	; (8000a6c <RCC_GetClocksFreq+0x140>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	f003 030c 	and.w	r3, r3, #12
 8000954:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	2b04      	cmp	r3, #4
 800095a:	d007      	beq.n	800096c <RCC_GetClocksFreq+0x40>
 800095c:	2b08      	cmp	r3, #8
 800095e:	d009      	beq.n	8000974 <RCC_GetClocksFreq+0x48>
 8000960:	2b00      	cmp	r3, #0
 8000962:	d13d      	bne.n	80009e0 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a42      	ldr	r2, [pc, #264]	; (8000a70 <RCC_GetClocksFreq+0x144>)
 8000968:	601a      	str	r2, [r3, #0]
    break;
 800096a:	e03d      	b.n	80009e8 <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a41      	ldr	r2, [pc, #260]	; (8000a74 <RCC_GetClocksFreq+0x148>)
 8000970:	601a      	str	r2, [r3, #0]
    break;
 8000972:	e039      	b.n	80009e8 <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000974:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <RCC_GetClocksFreq+0x140>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	0d9b      	lsrs	r3, r3, #22
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000980:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <RCC_GetClocksFreq+0x140>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000988:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00c      	beq.n	80009aa <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000990:	4a38      	ldr	r2, [pc, #224]	; (8000a74 <RCC_GetClocksFreq+0x148>)
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	fbb2 f3f3 	udiv	r3, r2, r3
 8000998:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <RCC_GetClocksFreq+0x140>)
 800099a:	6852      	ldr	r2, [r2, #4]
 800099c:	0992      	lsrs	r2, r2, #6
 800099e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009a2:	fb02 f303 	mul.w	r3, r2, r3
 80009a6:	61fb      	str	r3, [r7, #28]
 80009a8:	e00b      	b.n	80009c2 <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80009aa:	4a31      	ldr	r2, [pc, #196]	; (8000a70 <RCC_GetClocksFreq+0x144>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <RCC_GetClocksFreq+0x140>)
 80009b4:	6852      	ldr	r2, [r2, #4]
 80009b6:	0992      	lsrs	r2, r2, #6
 80009b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <RCC_GetClocksFreq+0x140>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	0c1b      	lsrs	r3, r3, #16
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	3301      	adds	r3, #1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80009d2:	69fa      	ldr	r2, [r7, #28]
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
    break;
 80009de:	e003      	b.n	80009e8 <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <RCC_GetClocksFreq+0x144>)
 80009e4:	601a      	str	r2, [r3, #0]
    break;
 80009e6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009e8:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <RCC_GetClocksFreq+0x140>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009f0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80009f8:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <RCC_GetClocksFreq+0x14c>)
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	40da      	lsrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <RCC_GetClocksFreq+0x140>)
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a18:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	0a9b      	lsrs	r3, r3, #10
 8000a1e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a20:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <RCC_GetClocksFreq+0x14c>)
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685a      	ldr	r2, [r3, #4]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	40da      	lsrs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <RCC_GetClocksFreq+0x140>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a40:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	0b5b      	lsrs	r3, r3, #13
 8000a46:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a48:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <RCC_GetClocksFreq+0x14c>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	40da      	lsrs	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60da      	str	r2, [r3, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3724      	adds	r7, #36	; 0x24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	00f42400 	.word	0x00f42400
 8000a74:	017d7840 	.word	0x017d7840
 8000a78:	20000004 	.word	0x20000004

08000a7c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a92:	4909      	ldr	r1, [pc, #36]	; (8000ab8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a9a:	e006      	b.n	8000aaa <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	4904      	ldr	r1, [pc, #16]	; (8000ab8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d006      	beq.n	8000adc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad2:	4909      	ldr	r1, [pc, #36]	; (8000af8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ada:	e006      	b.n	8000aea <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	4904      	ldr	r1, [pc, #16]	; (8000af8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	8a1b      	ldrh	r3, [r3, #16]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	88db      	ldrh	r3, [r3, #6]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	899b      	ldrh	r3, [r3, #12]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000b48:	f023 030c 	bic.w	r3, r3, #12
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	889a      	ldrh	r2, [r3, #4]
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	891b      	ldrh	r3, [r3, #8]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	461a      	mov	r2, r3
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	4313      	orrs	r3, r2
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	8a9b      	ldrh	r3, [r3, #20]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	899b      	ldrh	r3, [r3, #12]
 8000b86:	461a      	mov	r2, r3
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fec6 	bl	800092c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a30      	ldr	r2, [pc, #192]	; (8000c64 <USART_Init+0x168>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d003      	beq.n	8000bb0 <USART_Init+0xb4>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <USART_Init+0x16c>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d102      	bne.n	8000bb6 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	623b      	str	r3, [r7, #32]
 8000bb4:	e001      	b.n	8000bba <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	899b      	ldrh	r3, [r3, #12]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da0c      	bge.n	8000be0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000bc6:	6a3a      	ldr	r2, [r7, #32]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	009a      	lsls	r2, r3, #2
 8000bd0:	441a      	add	r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	e00b      	b.n	8000bf8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000be0:	6a3a      	ldr	r2, [r7, #32]
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	009a      	lsls	r2, r3, #2
 8000bea:	441a      	add	r2, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <USART_Init+0x170>)
 8000bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000c00:	095b      	lsrs	r3, r3, #5
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	091b      	lsrs	r3, r3, #4
 8000c0a:	2264      	movs	r2, #100	; 0x64
 8000c0c:	fb02 f303 	mul.w	r3, r2, r3
 8000c10:	69fa      	ldr	r2, [r7, #28]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	899b      	ldrh	r3, [r3, #12]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	da0c      	bge.n	8000c3c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	3332      	adds	r3, #50	; 0x32
 8000c28:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <USART_Init+0x170>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c36:	4313      	orrs	r3, r2
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
 8000c3a:	e00b      	b.n	8000c54 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	3332      	adds	r3, #50	; 0x32
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <USART_Init+0x170>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	095b      	lsrs	r3, r3, #5
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c50:	4313      	orrs	r3, r2
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	811a      	strh	r2, [r3, #8]
}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40011400 	.word	0x40011400
 8000c6c:	51eb851f 	.word	0x51eb851f

08000c70 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d008      	beq.n	8000c94 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	899b      	ldrh	r3, [r3, #12]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000c92:	e007      	b.n	8000ca4 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	899b      	ldrh	r3, [r3, #12]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	819a      	strh	r2, [r3, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	809a      	strh	r2, [r3, #4]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	4013      	ands	r3, r2
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e001      	b.n	8000cfe <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f103 0208 	add.w	r2, r3, #8
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f103 0208 	add.w	r2, r3, #8
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f103 0208 	add.w	r2, r3, #8
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d66:	b480      	push	{r7}
 8000d68:	b085      	sub	sp, #20
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	601a      	str	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000dae:	b480      	push	{r7}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d103      	bne.n	8000dce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	e00c      	b.n	8000de8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e002      	b.n	8000ddc <vListInsert+0x2e>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d2f6      	bcs.n	8000dd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	6892      	ldr	r2, [r2, #8]
 8000e36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6852      	ldr	r2, [r2, #4]
 8000e40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d103      	bne.n	8000e54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1e5a      	subs	r2, r3, #1
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	4613      	mov	r3, r2
 8000e82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 f83b 	bl	8001f04 <pvPortMalloc>
 8000e8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00e      	beq.n	8000eb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e96:	2058      	movs	r0, #88	; 0x58
 8000e98:	f001 f834 	bl	8001f04 <pvPortMalloc>
 8000e9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8000eaa:	e005      	b.n	8000eb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	f001 f8eb 	bl	8002088 <vPortFree>
 8000eb2:	e001      	b.n	8000eb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d013      	beq.n	8000ee6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000ebe:	88fa      	ldrh	r2, [r7, #6]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9303      	str	r3, [sp, #12]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f000 f80e 	bl	8000ef6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000eda:	69f8      	ldr	r0, [r7, #28]
 8000edc:	f000 f89e 	bl	800101c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	e002      	b.n	8000eec <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000eec:	69bb      	ldr	r3, [r7, #24]
	}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b088      	sub	sp, #32
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d109      	bne.n	8000f1e <prvInitialiseNewTask+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f0e:	f383 8811 	msr	BASEPRI, r3
 8000f12:	f3bf 8f6f 	isb	sy
 8000f16:	f3bf 8f4f 	dsb	sy
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e7fe      	b.n	8000f1c <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	461a      	mov	r2, r3
 8000f28:	21a5      	movs	r1, #165	; 0xa5
 8000f2a:	f002 fecd 	bl	8003cc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	f023 0307 	bic.w	r3, r3, #7
 8000f46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d009      	beq.n	8000f66 <prvInitialiseNewTask+0x70>
 8000f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f56:	f383 8811 	msr	BASEPRI, r3
 8000f5a:	f3bf 8f6f 	isb	sy
 8000f5e:	f3bf 8f4f 	dsb	sy
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	e7fe      	b.n	8000f64 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e012      	b.n	8000f92 <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	4413      	add	r3, r2
 8000f72:	7819      	ldrb	r1, [r3, #0]
 8000f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	4413      	add	r3, r2
 8000f7a:	3334      	adds	r3, #52	; 0x34
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	2b09      	cmp	r3, #9
 8000f96:	d9e9      	bls.n	8000f6c <prvInitialiseNewTask+0x76>
 8000f98:	e000      	b.n	8000f9c <prvInitialiseNewTask+0xa6>
		{
			break;
 8000f9a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d901      	bls.n	8000fae <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000faa:	2304      	movs	r3, #4
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fb8:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fec1 	bl	8000d4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fcc:	3318      	adds	r3, #24
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff febc 	bl	8000d4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fdc:	f1c3 0205 	rsb	r2, r3, #5
 8000fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fec:	2200      	movs	r2, #0
 8000fee:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	68f9      	ldr	r1, [r7, #12]
 8000ffc:	69b8      	ldr	r0, [r7, #24]
 8000ffe:	f000 fd37 	bl	8001a70 <pxPortInitialiseStack>
 8001002:	4602      	mov	r2, r0
 8001004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001006:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001012:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af02      	add	r7, sp, #8
 8001022:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001024:	f000 fe4a 	bl	8001cbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <prvAddNewTaskToReadyList+0xfc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	4a3a      	ldr	r2, [pc, #232]	; (8001118 <prvAddNewTaskToReadyList+0xfc>)
 8001030:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <prvAddNewTaskToReadyList+0x100>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d109      	bne.n	800104e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800103a:	4a38      	ldr	r2, [pc, #224]	; (800111c <prvAddNewTaskToReadyList+0x100>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <prvAddNewTaskToReadyList+0xfc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d110      	bne.n	800106a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001048:	f000 fad6 	bl	80015f8 <prvInitialiseTaskLists>
 800104c:	e00d      	b.n	800106a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <prvAddNewTaskToReadyList+0x104>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d109      	bne.n	800106a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <prvAddNewTaskToReadyList+0x100>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	429a      	cmp	r2, r3
 8001062:	d802      	bhi.n	800106a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001064:	4a2d      	ldr	r2, [pc, #180]	; (800111c <prvAddNewTaskToReadyList+0x100>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <prvAddNewTaskToReadyList+0x108>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a2c      	ldr	r2, [pc, #176]	; (8001124 <prvAddNewTaskToReadyList+0x108>)
 8001072:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <prvAddNewTaskToReadyList+0x108>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d016      	beq.n	80010b0 <prvAddNewTaskToReadyList+0x94>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fb6b 	bl	8003760 <SEGGER_SYSVIEW_OnTaskCreate>
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	461d      	mov	r5, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	461c      	mov	r4, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	1ae3      	subs	r3, r4, r3
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	462b      	mov	r3, r5
 80010ac:	f001 f9a8 	bl	8002400 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fbdc 	bl	8003870 <SEGGER_SYSVIEW_OnTaskStartReady>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	2201      	movs	r2, #1
 80010be:	409a      	lsls	r2, r3
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <prvAddNewTaskToReadyList+0x10c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <prvAddNewTaskToReadyList+0x10c>)
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <prvAddNewTaskToReadyList+0x110>)
 80010d8:	441a      	add	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3304      	adds	r3, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4610      	mov	r0, r2
 80010e2:	f7ff fe40 	bl	8000d66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80010e6:	f000 fe17 	bl	8001d18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <prvAddNewTaskToReadyList+0x104>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00e      	beq.n	8001110 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <prvAddNewTaskToReadyList+0x100>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <prvAddNewTaskToReadyList+0x114>)
 8001102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	f3bf 8f4f 	dsb	sy
 800110c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}
 8001118:	20000274 	.word	0x20000274
 800111c:	2000019c 	.word	0x2000019c
 8001120:	20000280 	.word	0x20000280
 8001124:	20000290 	.word	0x20000290
 8001128:	2000027c 	.word	0x2000027c
 800112c:	200001a0 	.word	0x200001a0
 8001130:	e000ed04 	.word	0xe000ed04

08001134 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <vTaskStartScheduler+0x90>)
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	2300      	movs	r3, #0
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2300      	movs	r3, #0
 8001144:	2282      	movs	r2, #130	; 0x82
 8001146:	4920      	ldr	r1, [pc, #128]	; (80011c8 <vTaskStartScheduler+0x94>)
 8001148:	4820      	ldr	r0, [pc, #128]	; (80011cc <vTaskStartScheduler+0x98>)
 800114a:	f7ff fe93 	bl	8000e74 <xTaskCreate>
 800114e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d123      	bne.n	800119e <vTaskStartScheduler+0x6a>
 8001156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <vTaskStartScheduler+0x9c>)
 800116a:	f04f 32ff 	mov.w	r2, #4294967295
 800116e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <vTaskStartScheduler+0xa0>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <vTaskStartScheduler+0xa4>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <vTaskStartScheduler+0xa8>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <vTaskStartScheduler+0x90>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d102      	bne.n	800118e <vTaskStartScheduler+0x5a>
 8001188:	f002 face 	bl	8003728 <SEGGER_SYSVIEW_OnIdle>
 800118c:	e004      	b.n	8001198 <vTaskStartScheduler+0x64>
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <vTaskStartScheduler+0xa8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fb28 	bl	80037e8 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001198:	f000 fcf2 	bl	8001b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800119c:	e00d      	b.n	80011ba <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d109      	bne.n	80011ba <vTaskStartScheduler+0x86>
 80011a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	e7fe      	b.n	80011b8 <vTaskStartScheduler+0x84>
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000298 	.word	0x20000298
 80011c8:	08004578 	.word	0x08004578
 80011cc:	080015c9 	.word	0x080015c9
 80011d0:	20000294 	.word	0x20000294
 80011d4:	20000280 	.word	0x20000280
 80011d8:	20000278 	.word	0x20000278
 80011dc:	2000019c 	.word	0x2000019c

080011e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <vTaskSuspendAll+0x18>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a03      	ldr	r2, [pc, #12]	; (80011f8 <vTaskSuspendAll+0x18>)
 80011ec:	6013      	str	r3, [r2, #0]
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	2000029c 	.word	0x2000029c

080011fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800120a:	4b43      	ldr	r3, [pc, #268]	; (8001318 <xTaskResumeAll+0x11c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <xTaskResumeAll+0x2a>
 8001212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001216:	f383 8811 	msr	BASEPRI, r3
 800121a:	f3bf 8f6f 	isb	sy
 800121e:	f3bf 8f4f 	dsb	sy
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	e7fe      	b.n	8001224 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001226:	f000 fd49 	bl	8001cbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <xTaskResumeAll+0x11c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3b01      	subs	r3, #1
 8001230:	4a39      	ldr	r2, [pc, #228]	; (8001318 <xTaskResumeAll+0x11c>)
 8001232:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001234:	4b38      	ldr	r3, [pc, #224]	; (8001318 <xTaskResumeAll+0x11c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d165      	bne.n	8001308 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <xTaskResumeAll+0x120>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d061      	beq.n	8001308 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001244:	e032      	b.n	80012ac <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <xTaskResumeAll+0x124>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3318      	adds	r3, #24
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fde4 	bl	8000e20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3304      	adds	r3, #4
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fddf 	bl	8000e20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4618      	mov	r0, r3
 8001266:	f002 fb03 	bl	8003870 <SEGGER_SYSVIEW_OnTaskStartReady>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	2201      	movs	r2, #1
 8001270:	409a      	lsls	r2, r3
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <xTaskResumeAll+0x128>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4313      	orrs	r3, r2
 8001278:	4a2a      	ldr	r2, [pc, #168]	; (8001324 <xTaskResumeAll+0x128>)
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4a27      	ldr	r2, [pc, #156]	; (8001328 <xTaskResumeAll+0x12c>)
 800128a:	441a      	add	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3304      	adds	r3, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4610      	mov	r0, r2
 8001294:	f7ff fd67 	bl	8000d66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <xTaskResumeAll+0x130>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d302      	bcc.n	80012ac <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <xTaskResumeAll+0x134>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <xTaskResumeAll+0x124>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1c8      	bne.n	8001246 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80012ba:	f000 fa19 	bl	80016f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <xTaskResumeAll+0x138>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d010      	beq.n	80012ec <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80012ca:	f000 f859 	bl	8001380 <xTaskIncrementTick>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <xTaskResumeAll+0x134>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3b01      	subs	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f1      	bne.n	80012ca <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <xTaskResumeAll+0x138>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <xTaskResumeAll+0x134>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d009      	beq.n	8001308 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <xTaskResumeAll+0x13c>)
 80012fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	f3bf 8f4f 	dsb	sy
 8001304:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001308:	f000 fd06 	bl	8001d18 <vPortExitCritical>

	return xAlreadyYielded;
 800130c:	68bb      	ldr	r3, [r7, #8]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000029c 	.word	0x2000029c
 800131c:	20000274 	.word	0x20000274
 8001320:	20000234 	.word	0x20000234
 8001324:	2000027c 	.word	0x2000027c
 8001328:	200001a0 	.word	0x200001a0
 800132c:	2000019c 	.word	0x2000019c
 8001330:	20000288 	.word	0x20000288
 8001334:	20000284 	.word	0x20000284
 8001338:	e000ed04 	.word	0xe000ed04

0800133c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <xTaskGetTickCount+0x1c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001348:	687b      	ldr	r3, [r7, #4]
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000278 	.word	0x20000278

0800135c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001362:	f000 fd91 	bl	8001e88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <xTaskGetTickCountFromISR+0x20>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001370:	683b      	ldr	r3, [r7, #0]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000278 	.word	0x20000278

08001380 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <xTaskIncrementTick+0x14c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 808b 	bne.w	80014aa <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001394:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <xTaskIncrementTick+0x150>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800139c:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <xTaskIncrementTick+0x150>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d11f      	bne.n	80013e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80013a8:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <xTaskIncrementTick+0x154>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <xTaskIncrementTick+0x46>
 80013b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b6:	f383 8811 	msr	BASEPRI, r3
 80013ba:	f3bf 8f6f 	isb	sy
 80013be:	f3bf 8f4f 	dsb	sy
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	e7fe      	b.n	80013c4 <xTaskIncrementTick+0x44>
 80013c6:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <xTaskIncrementTick+0x154>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <xTaskIncrementTick+0x158>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a40      	ldr	r2, [pc, #256]	; (80014d4 <xTaskIncrementTick+0x154>)
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <xTaskIncrementTick+0x158>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b40      	ldr	r3, [pc, #256]	; (80014dc <xTaskIncrementTick+0x15c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a3e      	ldr	r2, [pc, #248]	; (80014dc <xTaskIncrementTick+0x15c>)
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	f000 f984 	bl	80016f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <xTaskIncrementTick+0x160>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d34c      	bcc.n	800148c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <xTaskIncrementTick+0x154>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d104      	bne.n	8001406 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013fc:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <xTaskIncrementTick+0x160>)
 80013fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001402:	601a      	str	r2, [r3, #0]
					break;
 8001404:	e042      	b.n	800148c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <xTaskIncrementTick+0x154>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d203      	bcs.n	8001426 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800141e:	4a30      	ldr	r2, [pc, #192]	; (80014e0 <xTaskIncrementTick+0x160>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001424:	e032      	b.n	800148c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3304      	adds	r3, #4
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fcf8 	bl	8000e20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3318      	adds	r3, #24
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fcef 	bl	8000e20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fa13 	bl	8003870 <SEGGER_SYSVIEW_OnTaskStartReady>
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	2201      	movs	r2, #1
 8001450:	409a      	lsls	r2, r3
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <xTaskIncrementTick+0x164>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4313      	orrs	r3, r2
 8001458:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <xTaskIncrementTick+0x164>)
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <xTaskIncrementTick+0x168>)
 800146a:	441a      	add	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3304      	adds	r3, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4610      	mov	r0, r2
 8001474:	f7ff fc77 	bl	8000d66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <xTaskIncrementTick+0x16c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	429a      	cmp	r2, r3
 8001484:	d3b5      	bcc.n	80013f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001486:	2301      	movs	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800148a:	e7b2      	b.n	80013f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <xTaskIncrementTick+0x16c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001492:	4915      	ldr	r1, [pc, #84]	; (80014e8 <xTaskIncrementTick+0x168>)
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d907      	bls.n	80014b4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e004      	b.n	80014b4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <xTaskIncrementTick+0x170>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <xTaskIncrementTick+0x170>)
 80014b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <xTaskIncrementTick+0x174>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80014bc:	2301      	movs	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80014c0:	697b      	ldr	r3, [r7, #20]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000029c 	.word	0x2000029c
 80014d0:	20000278 	.word	0x20000278
 80014d4:	2000022c 	.word	0x2000022c
 80014d8:	20000230 	.word	0x20000230
 80014dc:	2000028c 	.word	0x2000028c
 80014e0:	20000294 	.word	0x20000294
 80014e4:	2000027c 	.word	0x2000027c
 80014e8:	200001a0 	.word	0x200001a0
 80014ec:	2000019c 	.word	0x2000019c
 80014f0:	20000284 	.word	0x20000284
 80014f4:	20000288 	.word	0x20000288

080014f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <vTaskSwitchContext+0xb8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <vTaskSwitchContext+0xbc>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800150c:	e04c      	b.n	80015a8 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <vTaskSwitchContext+0xbc>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <vTaskSwitchContext+0xc0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	fab3 f383 	clz	r3, r3
 8001520:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001522:	7afb      	ldrb	r3, [r7, #11]
 8001524:	f1c3 031f 	rsb	r3, r3, #31
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	4924      	ldr	r1, [pc, #144]	; (80015bc <vTaskSwitchContext+0xc4>)
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <vTaskSwitchContext+0x5a>
	__asm volatile
 800153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001542:	f383 8811 	msr	BASEPRI, r3
 8001546:	f3bf 8f6f 	isb	sy
 800154a:	f3bf 8f4f 	dsb	sy
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	e7fe      	b.n	8001550 <vTaskSwitchContext+0x58>
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4a17      	ldr	r2, [pc, #92]	; (80015bc <vTaskSwitchContext+0xc4>)
 800155e:	4413      	add	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	3308      	adds	r3, #8
 8001574:	429a      	cmp	r2, r3
 8001576:	d104      	bne.n	8001582 <vTaskSwitchContext+0x8a>
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <vTaskSwitchContext+0xc8>)
 800158a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <vTaskSwitchContext+0xc8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <vTaskSwitchContext+0xcc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d102      	bne.n	800159e <vTaskSwitchContext+0xa6>
 8001598:	f002 f8c6 	bl	8003728 <SEGGER_SYSVIEW_OnIdle>
}
 800159c:	e004      	b.n	80015a8 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <vTaskSwitchContext+0xc8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 f920 	bl	80037e8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000029c 	.word	0x2000029c
 80015b4:	20000288 	.word	0x20000288
 80015b8:	2000027c 	.word	0x2000027c
 80015bc:	200001a0 	.word	0x200001a0
 80015c0:	2000019c 	.word	0x2000019c
 80015c4:	20000298 	.word	0x20000298

080015c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80015d0:	f000 f852 	bl	8001678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <prvIdleTask+0x28>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d9f9      	bls.n	80015d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <prvIdleTask+0x2c>)
 80015de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80015ec:	e7f0      	b.n	80015d0 <prvIdleTask+0x8>
 80015ee:	bf00      	nop
 80015f0:	200001a0 	.word	0x200001a0
 80015f4:	e000ed04 	.word	0xe000ed04

080015f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	e00c      	b.n	800161e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <prvInitialiseTaskLists+0x60>)
 8001610:	4413      	add	r3, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fb7a 	bl	8000d0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3301      	adds	r3, #1
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b04      	cmp	r3, #4
 8001622:	d9ef      	bls.n	8001604 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001624:	480d      	ldr	r0, [pc, #52]	; (800165c <prvInitialiseTaskLists+0x64>)
 8001626:	f7ff fb71 	bl	8000d0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <prvInitialiseTaskLists+0x68>)
 800162c:	f7ff fb6e 	bl	8000d0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <prvInitialiseTaskLists+0x6c>)
 8001632:	f7ff fb6b 	bl	8000d0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001636:	480c      	ldr	r0, [pc, #48]	; (8001668 <prvInitialiseTaskLists+0x70>)
 8001638:	f7ff fb68 	bl	8000d0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <prvInitialiseTaskLists+0x74>)
 800163e:	f7ff fb65 	bl	8000d0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <prvInitialiseTaskLists+0x78>)
 8001644:	4a05      	ldr	r2, [pc, #20]	; (800165c <prvInitialiseTaskLists+0x64>)
 8001646:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <prvInitialiseTaskLists+0x7c>)
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <prvInitialiseTaskLists+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200001a0 	.word	0x200001a0
 800165c:	20000204 	.word	0x20000204
 8001660:	20000218 	.word	0x20000218
 8001664:	20000234 	.word	0x20000234
 8001668:	20000248 	.word	0x20000248
 800166c:	20000260 	.word	0x20000260
 8001670:	2000022c 	.word	0x2000022c
 8001674:	20000230 	.word	0x20000230

08001678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800167e:	e019      	b.n	80016b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001680:	f000 fb1c 	bl	8001cbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <prvCheckTasksWaitingTermination+0x4c>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3304      	adds	r3, #4
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fbc5 	bl	8000e20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <prvCheckTasksWaitingTermination+0x50>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3b01      	subs	r3, #1
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <prvCheckTasksWaitingTermination+0x50>)
 800169e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <prvCheckTasksWaitingTermination+0x54>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <prvCheckTasksWaitingTermination+0x54>)
 80016a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80016aa:	f000 fb35 	bl	8001d18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f80e 	bl	80016d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <prvCheckTasksWaitingTermination+0x54>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e1      	bne.n	8001680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000248 	.word	0x20000248
 80016c8:	20000274 	.word	0x20000274
 80016cc:	2000025c 	.word	0x2000025c

080016d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fcd3 	bl	8002088 <vPortFree>
			vPortFree( pxTCB );
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fcd0 	bl	8002088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <prvResetNextTaskUnblockTime+0x38>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d104      	bne.n	800170a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <prvResetNextTaskUnblockTime+0x3c>)
 8001702:	f04f 32ff 	mov.w	r2, #4294967295
 8001706:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001708:	e008      	b.n	800171c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <prvResetNextTaskUnblockTime+0x38>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <prvResetNextTaskUnblockTime+0x3c>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	2000022c 	.word	0x2000022c
 800172c:	20000294 	.word	0x20000294

08001730 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800173e:	f000 fabd 	bl	8001cbc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <xTaskNotifyWait+0xc0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d01a      	beq.n	8001786 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <xTaskNotifyWait+0xc0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	43d2      	mvns	r2, r2
 800175a:	400a      	ands	r2, r1
 800175c:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <xTaskNotifyWait+0xc0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800176e:	2101      	movs	r1, #1
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f000 f905 	bl	8001980 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <xTaskNotifyWait+0xc4>)
 8001778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	f3bf 8f4f 	dsb	sy
 8001782:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8001786:	f000 fac7 	bl	8001d18 <vPortExitCritical>

		taskENTER_CRITICAL();
 800178a:	f000 fa97 	bl	8001cbc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4613      	mov	r3, r2
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	68f9      	ldr	r1, [r7, #12]
 800179a:	2040      	movs	r0, #64	; 0x40
 800179c:	f001 fbee 	bl	8002f7c <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <xTaskNotifyWait+0xc0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <xTaskNotifyWait+0xc0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d002      	beq.n	80017c4 <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e008      	b.n	80017d6 <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <xTaskNotifyWait+0xc0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	43d2      	mvns	r2, r2
 80017ce:	400a      	ands	r2, r1
 80017d0:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <xTaskNotifyWait+0xc0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80017e0:	f000 fa9a 	bl	8001d18 <vPortExitCritical>

		return xReturn;
 80017e4:	697b      	ldr	r3, [r7, #20]
	}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000019c 	.word	0x2000019c
 80017f4:	e000ed04 	.word	0xe000ed04

080017f8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8001808:	2301      	movs	r3, #1
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <xTaskGenericNotify+0x2e>
 8001812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001816:	f383 8811 	msr	BASEPRI, r3
 800181a:	f3bf 8f6f 	isb	sy
 800181e:	f3bf 8f4f 	dsb	sy
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	e7fe      	b.n	8001824 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800182a:	f000 fa47 	bl	8001cbc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001842:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	2202      	movs	r2, #2
 8001848:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b04      	cmp	r3, #4
 8001850:	d827      	bhi.n	80018a2 <xTaskGenericNotify+0xaa>
 8001852:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <xTaskGenericNotify+0x60>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	080018c1 	.word	0x080018c1
 800185c:	0800186d 	.word	0x0800186d
 8001860:	0800187b 	.word	0x0800187b
 8001864:	08001887 	.word	0x08001887
 8001868:	0800188f 	.word	0x0800188f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	431a      	orrs	r2, r3
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8001878:	e025      	b.n	80018c6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8001884:	e01f      	b.n	80018c6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800188c:	e01b      	b.n	80018c6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800188e:	7ffb      	ldrb	r3, [r7, #31]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d003      	beq.n	800189c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800189a:	e014      	b.n	80018c6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80018a0:	e011      	b.n	80018c6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018aa:	d00b      	beq.n	80018c4 <xTaskGenericNotify+0xcc>
 80018ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b0:	f383 8811 	msr	BASEPRI, r3
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e7fe      	b.n	80018be <xTaskGenericNotify+0xc6>
					break;
 80018c0:	bf00      	nop
 80018c2:	e000      	b.n	80018c6 <xTaskGenericNotify+0xce>

					break;
 80018c4:	bf00      	nop
			}

			traceTASK_NOTIFY();
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 f875 	bl	80039b8 <SEGGER_SYSVIEW_ShrinkId>
 80018ce:	4601      	mov	r1, r0
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	4613      	mov	r3, r2
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	203e      	movs	r0, #62	; 0x3e
 80018dc:	f001 fb4e 	bl	8002f7c <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80018e0:	7ffb      	ldrb	r3, [r7, #31]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d13c      	bne.n	8001960 <xTaskGenericNotify+0x168>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	3304      	adds	r3, #4
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fa98 	bl	8000e20 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 ffbc 	bl	8003870 <SEGGER_SYSVIEW_OnTaskStartReady>
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <xTaskGenericNotify+0x178>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4313      	orrs	r3, r2
 8001906:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <xTaskGenericNotify+0x178>)
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <xTaskGenericNotify+0x17c>)
 8001918:	441a      	add	r2, r3
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	3304      	adds	r3, #4
 800191e:	4619      	mov	r1, r3
 8001920:	4610      	mov	r0, r2
 8001922:	f7ff fa20 	bl	8000d66 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <xTaskGenericNotify+0x14a>
 800192e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001932:	f383 8811 	msr	BASEPRI, r3
 8001936:	f3bf 8f6f 	isb	sy
 800193a:	f3bf 8f4f 	dsb	sy
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	e7fe      	b.n	8001940 <xTaskGenericNotify+0x148>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <xTaskGenericNotify+0x180>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	429a      	cmp	r2, r3
 800194e:	d907      	bls.n	8001960 <xTaskGenericNotify+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <xTaskGenericNotify+0x184>)
 8001952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f3bf 8f4f 	dsb	sy
 800195c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8001960:	f000 f9da 	bl	8001d18 <vPortExitCritical>

		return xReturn;
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8001966:	4618      	mov	r0, r3
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000027c 	.word	0x2000027c
 8001974:	200001a0 	.word	0x200001a0
 8001978:	2000019c 	.word	0x2000019c
 800197c:	e000ed04 	.word	0xe000ed04

08001980 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800198a:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <prvAddCurrentTaskToDelayedList+0xd4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3304      	adds	r3, #4
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fa42 	bl	8000e20 <uxListRemove>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10b      	bne.n	80019ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	2201      	movs	r2, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <prvAddCurrentTaskToDelayedList+0xdc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4013      	ands	r3, r2
 80019b6:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <prvAddCurrentTaskToDelayedList+0xdc>)
 80019b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d110      	bne.n	80019e4 <prvAddCurrentTaskToDelayedList+0x64>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00d      	beq.n	80019e4 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	211b      	movs	r1, #27
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 ff92 	bl	80038f8 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3304      	adds	r3, #4
 80019da:	4619      	mov	r1, r3
 80019dc:	4820      	ldr	r0, [pc, #128]	; (8001a60 <prvAddCurrentTaskToDelayedList+0xe0>)
 80019de:	f7ff f9c2 	bl	8000d66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80019e2:	e032      	b.n	8001a4a <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d20f      	bcs.n	8001a1c <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2104      	movs	r1, #4
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 ff78 	bl	80038f8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3304      	adds	r3, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	4610      	mov	r0, r2
 8001a16:	f7ff f9ca 	bl	8000dae <vListInsert>
}
 8001a1a:	e016      	b.n	8001a4a <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2104      	movs	r1, #4
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 ff68 	bl	80038f8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3304      	adds	r3, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4610      	mov	r0, r2
 8001a36:	f7ff f9ba 	bl	8000dae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <prvAddCurrentTaskToDelayedList+0xec>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d202      	bcs.n	8001a4a <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8001a44:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <prvAddCurrentTaskToDelayedList+0xec>)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	6013      	str	r3, [r2, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000278 	.word	0x20000278
 8001a58:	2000019c 	.word	0x2000019c
 8001a5c:	2000027c 	.word	0x2000027c
 8001a60:	20000260 	.word	0x20000260
 8001a64:	20000230 	.word	0x20000230
 8001a68:	2000022c 	.word	0x2000022c
 8001a6c:	20000294 	.word	0x20000294

08001a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3b04      	subs	r3, #4
 8001a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f023 0201 	bic.w	r2, r3, #1
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b04      	subs	r3, #4
 8001a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001aa0:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <pxPortInitialiseStack+0x64>)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3b14      	subs	r3, #20
 8001aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3b04      	subs	r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f06f 0202 	mvn.w	r2, #2
 8001abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3b20      	subs	r3, #32
 8001ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	08001ad9 	.word	0x08001ad9

08001ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <prvTaskExitError+0x50>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d009      	beq.n	8001b00 <prvTaskExitError+0x28>
 8001aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af0:	f383 8811 	msr	BASEPRI, r3
 8001af4:	f3bf 8f6f 	isb	sy
 8001af8:	f3bf 8f4f 	dsb	sy
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	e7fe      	b.n	8001afe <prvTaskExitError+0x26>
 8001b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b04:	f383 8811 	msr	BASEPRI, r3
 8001b08:	f3bf 8f6f 	isb	sy
 8001b0c:	f3bf 8f4f 	dsb	sy
 8001b10:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001b12:	bf00      	nop
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0fc      	beq.n	8001b14 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000014 	.word	0x20000014
 8001b2c:	00000000 	.word	0x00000000

08001b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <pxCurrentTCBConst2>)
 8001b32:	6819      	ldr	r1, [r3, #0]
 8001b34:	6808      	ldr	r0, [r1, #0]
 8001b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b3a:	f380 8809 	msr	PSP, r0
 8001b3e:	f3bf 8f6f 	isb	sy
 8001b42:	f04f 0000 	mov.w	r0, #0
 8001b46:	f380 8811 	msr	BASEPRI, r0
 8001b4a:	4770      	bx	lr
 8001b4c:	f3af 8000 	nop.w

08001b50 <pxCurrentTCBConst2>:
 8001b50:	2000019c 	.word	0x2000019c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop

08001b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001b58:	4808      	ldr	r0, [pc, #32]	; (8001b7c <prvPortStartFirstTask+0x24>)
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	6800      	ldr	r0, [r0, #0]
 8001b5e:	f380 8808 	msr	MSP, r0
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f380 8814 	msr	CONTROL, r0
 8001b6a:	b662      	cpsie	i
 8001b6c:	b661      	cpsie	f
 8001b6e:	f3bf 8f4f 	dsb	sy
 8001b72:	f3bf 8f6f 	isb	sy
 8001b76:	df00      	svc	0
 8001b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001b7a:	bf00      	nop
 8001b7c:	e000ed08 	.word	0xe000ed08

08001b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <xPortStartScheduler+0x118>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a44      	ldr	r2, [pc, #272]	; (8001c9c <xPortStartScheduler+0x11c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d109      	bne.n	8001ba4 <xPortStartScheduler+0x24>
 8001b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b94:	f383 8811 	msr	BASEPRI, r3
 8001b98:	f3bf 8f6f 	isb	sy
 8001b9c:	f3bf 8f4f 	dsb	sy
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	e7fe      	b.n	8001ba2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <xPortStartScheduler+0x118>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a3d      	ldr	r2, [pc, #244]	; (8001ca0 <xPortStartScheduler+0x120>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d109      	bne.n	8001bc2 <xPortStartScheduler+0x42>
 8001bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb2:	f383 8811 	msr	BASEPRI, r3
 8001bb6:	f3bf 8f6f 	isb	sy
 8001bba:	f3bf 8f4f 	dsb	sy
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e7fe      	b.n	8001bc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001bc2:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <xPortStartScheduler+0x124>)
 8001bc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	22ff      	movs	r2, #255	; 0xff
 8001bd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <xPortStartScheduler+0x128>)
 8001be8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001bea:	4b30      	ldr	r3, [pc, #192]	; (8001cac <xPortStartScheduler+0x12c>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001bf0:	e009      	b.n	8001c06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <xPortStartScheduler+0x12c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	4a2c      	ldr	r2, [pc, #176]	; (8001cac <xPortStartScheduler+0x12c>)
 8001bfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	2b80      	cmp	r3, #128	; 0x80
 8001c10:	d0ef      	beq.n	8001bf2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <xPortStartScheduler+0x12c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d009      	beq.n	8001c32 <xPortStartScheduler+0xb2>
 8001c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c22:	f383 8811 	msr	BASEPRI, r3
 8001c26:	f3bf 8f6f 	isb	sy
 8001c2a:	f3bf 8f4f 	dsb	sy
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	e7fe      	b.n	8001c30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <xPortStartScheduler+0x12c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <xPortStartScheduler+0x12c>)
 8001c3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <xPortStartScheduler+0x12c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <xPortStartScheduler+0x12c>)
 8001c46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <xPortStartScheduler+0x130>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <xPortStartScheduler+0x130>)
 8001c56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <xPortStartScheduler+0x130>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <xPortStartScheduler+0x130>)
 8001c62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001c66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001c68:	f000 f8e0 	bl	8001e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <xPortStartScheduler+0x134>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001c72:	f000 f8ff 	bl	8001e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <xPortStartScheduler+0x138>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <xPortStartScheduler+0x138>)
 8001c7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001c82:	f7ff ff69 	bl	8001b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001c86:	f7ff fc37 	bl	80014f8 <vTaskSwitchContext>
	prvTaskExitError();
 8001c8a:	f7ff ff25 	bl	8001ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	e000ed00 	.word	0xe000ed00
 8001c9c:	410fc271 	.word	0x410fc271
 8001ca0:	410fc270 	.word	0x410fc270
 8001ca4:	e000e400 	.word	0xe000e400
 8001ca8:	200002a0 	.word	0x200002a0
 8001cac:	200002a4 	.word	0x200002a4
 8001cb0:	e000ed20 	.word	0xe000ed20
 8001cb4:	20000014 	.word	0x20000014
 8001cb8:	e000ef34 	.word	0xe000ef34

08001cbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc6:	f383 8811 	msr	BASEPRI, r3
 8001cca:	f3bf 8f6f 	isb	sy
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <vPortEnterCritical+0x54>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <vPortEnterCritical+0x54>)
 8001cdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <vPortEnterCritical+0x54>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d10e      	bne.n	8001d04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <vPortEnterCritical+0x58>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <vPortEnterCritical+0x48>
 8001cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf4:	f383 8811 	msr	BASEPRI, r3
 8001cf8:	f3bf 8f6f 	isb	sy
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	e7fe      	b.n	8001d02 <vPortEnterCritical+0x46>
	}
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	20000014 	.word	0x20000014
 8001d14:	e000ed04 	.word	0xe000ed04

08001d18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <vPortExitCritical+0x4c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <vPortExitCritical+0x22>
 8001d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2a:	f383 8811 	msr	BASEPRI, r3
 8001d2e:	f3bf 8f6f 	isb	sy
 8001d32:	f3bf 8f4f 	dsb	sy
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	e7fe      	b.n	8001d38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <vPortExitCritical+0x4c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <vPortExitCritical+0x4c>)
 8001d42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <vPortExitCritical+0x4c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d104      	bne.n	8001d56 <vPortExitCritical+0x3e>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000014 	.word	0x20000014
	...

08001d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001d70:	f3ef 8009 	mrs	r0, PSP
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <pxCurrentTCBConst>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f01e 0f10 	tst.w	lr, #16
 8001d80:	bf08      	it	eq
 8001d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d8a:	6010      	str	r0, [r2, #0]
 8001d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d94:	f380 8811 	msr	BASEPRI, r0
 8001d98:	f3bf 8f4f 	dsb	sy
 8001d9c:	f3bf 8f6f 	isb	sy
 8001da0:	f7ff fbaa 	bl	80014f8 <vTaskSwitchContext>
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	f380 8811 	msr	BASEPRI, r0
 8001dac:	bc09      	pop	{r0, r3}
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	6808      	ldr	r0, [r1, #0]
 8001db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db6:	f01e 0f10 	tst.w	lr, #16
 8001dba:	bf08      	it	eq
 8001dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001dc0:	f380 8809 	msr	PSP, r0
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	f3af 8000 	nop.w

08001dd0 <pxCurrentTCBConst>:
 8001dd0:	2000019c 	.word	0x2000019c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop

08001dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8001dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de2:	f383 8811 	msr	BASEPRI, r3
 8001de6:	f3bf 8f6f 	isb	sy
 8001dea:	f3bf 8f4f 	dsb	sy
 8001dee:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001df0:	f001 fc20 	bl	8003634 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001df4:	f7ff fac4 	bl	8001380 <xTaskIncrementTick>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8001dfe:	f001 fc77 	bl	80036f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <SysTick_Handler+0x50>)
 8001e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e003      	b.n	8001e14 <SysTick_Handler+0x3c>
		}
		else
		{
			traceISR_EXIT();
 8001e0c:	f001 fc54 	bl	80036b8 <SEGGER_SYSVIEW_RecordExitISR>
			vTaskSwitchContext();
 8001e10:	f7ff fb72 	bl	80014f8 <vTaskSwitchContext>
 8001e14:	2300      	movs	r3, #0
 8001e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000ed04 	.word	0xe000ed04

08001e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <vPortSetupTimerInterrupt+0x34>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <vPortSetupTimerInterrupt+0x38>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <vPortSetupTimerInterrupt+0x3c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <vPortSetupTimerInterrupt+0x40>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	099b      	lsrs	r3, r3, #6
 8001e48:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <vPortSetupTimerInterrupt+0x44>)
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <vPortSetupTimerInterrupt+0x34>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010
 8001e64:	e000e018 	.word	0xe000e018
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	10624dd3 	.word	0x10624dd3
 8001e70:	e000e014 	.word	0xe000e014

08001e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001e74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001e84 <vPortEnableVFP+0x10>
 8001e78:	6801      	ldr	r1, [r0, #0]
 8001e7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001e7e:	6001      	str	r1, [r0, #0]
 8001e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001e82:	bf00      	nop
 8001e84:	e000ed88 	.word	0xe000ed88

08001e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001e8e:	f3ef 8305 	mrs	r3, IPSR
 8001e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	d913      	bls.n	8001ec2 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <vPortValidateInterruptPriority+0x6c>)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <vPortValidateInterruptPriority+0x70>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	7afa      	ldrb	r2, [r7, #11]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d209      	bcs.n	8001ec2 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb2:	f383 8811 	msr	BASEPRI, r3
 8001eb6:	f3bf 8f6f 	isb	sy
 8001eba:	f3bf 8f4f 	dsb	sy
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	e7fe      	b.n	8001ec0 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <vPortValidateInterruptPriority+0x74>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <vPortValidateInterruptPriority+0x78>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d909      	bls.n	8001ee6 <vPortValidateInterruptPriority+0x5e>
 8001ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed6:	f383 8811 	msr	BASEPRI, r3
 8001eda:	f3bf 8f6f 	isb	sy
 8001ede:	f3bf 8f4f 	dsb	sy
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	e7fe      	b.n	8001ee4 <vPortValidateInterruptPriority+0x5c>
	}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e3f0 	.word	0xe000e3f0
 8001ef8:	200002a0 	.word	0x200002a0
 8001efc:	e000ed0c 	.word	0xe000ed0c
 8001f00:	200002a4 	.word	0x200002a4

08001f04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001f10:	f7ff f966 	bl	80011e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001f14:	4b57      	ldr	r3, [pc, #348]	; (8002074 <pvPortMalloc+0x170>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001f1c:	f000 f90c 	bl	8002138 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001f20:	4b55      	ldr	r3, [pc, #340]	; (8002078 <pvPortMalloc+0x174>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f040 808c 	bne.w	8002046 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01c      	beq.n	8001f6e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001f34:	2208      	movs	r2, #8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d013      	beq.n	8001f6e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f023 0307 	bic.w	r3, r3, #7
 8001f4c:	3308      	adds	r3, #8
 8001f4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <pvPortMalloc+0x6a>
 8001f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5e:	f383 8811 	msr	BASEPRI, r3
 8001f62:	f3bf 8f6f 	isb	sy
 8001f66:	f3bf 8f4f 	dsb	sy
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e7fe      	b.n	8001f6c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d068      	beq.n	8002046 <pvPortMalloc+0x142>
 8001f74:	4b41      	ldr	r3, [pc, #260]	; (800207c <pvPortMalloc+0x178>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d863      	bhi.n	8002046 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <pvPortMalloc+0x17c>)
 8001f80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001f82:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <pvPortMalloc+0x17c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f88:	e004      	b.n	8001f94 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d903      	bls.n	8001fa6 <pvPortMalloc+0xa2>
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f1      	bne.n	8001f8a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001fa6:	4b33      	ldr	r3, [pc, #204]	; (8002074 <pvPortMalloc+0x170>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d04a      	beq.n	8002046 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	4413      	add	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	1ad2      	subs	r2, r2, r3
 8001fca:	2308      	movs	r3, #8
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d91e      	bls.n	8002010 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <pvPortMalloc+0xf4>
 8001fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	e7fe      	b.n	8001ff6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1ad2      	subs	r2, r2, r3
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800200a:	69b8      	ldr	r0, [r7, #24]
 800200c:	f000 f8f6 	bl	80021fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <pvPortMalloc+0x178>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	4a18      	ldr	r2, [pc, #96]	; (800207c <pvPortMalloc+0x178>)
 800201c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <pvPortMalloc+0x178>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <pvPortMalloc+0x180>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d203      	bcs.n	8002032 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <pvPortMalloc+0x178>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <pvPortMalloc+0x180>)
 8002030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <pvPortMalloc+0x174>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	431a      	orrs	r2, r3
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002046:	f7ff f8d9 	bl	80011fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <pvPortMalloc+0x164>
 8002054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002058:	f383 8811 	msr	BASEPRI, r3
 800205c:	f3bf 8f6f 	isb	sy
 8002060:	f3bf 8f4f 	dsb	sy
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e7fe      	b.n	8002066 <pvPortMalloc+0x162>
	return pvReturn;
 8002068:	69fb      	ldr	r3, [r7, #28]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20012eb0 	.word	0x20012eb0
 8002078:	20012ebc 	.word	0x20012ebc
 800207c:	20012eb4 	.word	0x20012eb4
 8002080:	20012ea8 	.word	0x20012ea8
 8002084:	20012eb8 	.word	0x20012eb8

08002088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d046      	beq.n	8002128 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800209a:	2308      	movs	r3, #8
 800209c:	425b      	negs	r3, r3
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4413      	add	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <vPortFree+0xa8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <vPortFree+0x42>
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	e7fe      	b.n	80020c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <vPortFree+0x5e>
 80020d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d6:	f383 8811 	msr	BASEPRI, r3
 80020da:	f3bf 8f6f 	isb	sy
 80020de:	f3bf 8f4f 	dsb	sy
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	e7fe      	b.n	80020e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <vPortFree+0xa8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d019      	beq.n	8002128 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d115      	bne.n	8002128 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <vPortFree+0xa8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	43db      	mvns	r3, r3
 8002106:	401a      	ands	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800210c:	f7ff f868 	bl	80011e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <vPortFree+0xac>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4413      	add	r3, r2
 800211a:	4a06      	ldr	r2, [pc, #24]	; (8002134 <vPortFree+0xac>)
 800211c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800211e:	6938      	ldr	r0, [r7, #16]
 8002120:	f000 f86c 	bl	80021fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002124:	f7ff f86a 	bl	80011fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20012ebc 	.word	0x20012ebc
 8002134:	20012eb4 	.word	0x20012eb4

08002138 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800213e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002142:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <prvHeapInit+0xac>)
 8002146:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00c      	beq.n	800216c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3307      	adds	r3, #7
 8002156:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0307 	bic.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <prvHeapInit+0xac>)
 8002168:	4413      	add	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <prvHeapInit+0xb0>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <prvHeapInit+0xb0>)
 8002178:	2200      	movs	r2, #0
 800217a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	4413      	add	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002184:	2208      	movs	r2, #8
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0307 	bic.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a15      	ldr	r2, [pc, #84]	; (80021ec <prvHeapInit+0xb4>)
 8002198:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <prvHeapInit+0xb4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <prvHeapInit+0xb4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	1ad2      	subs	r2, r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <prvHeapInit+0xb4>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <prvHeapInit+0xb8>)
 80021c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <prvHeapInit+0xbc>)
 80021ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <prvHeapInit+0xc0>)
 80021d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	200002a8 	.word	0x200002a8
 80021e8:	20012ea8 	.word	0x20012ea8
 80021ec:	20012eb0 	.word	0x20012eb0
 80021f0:	20012eb8 	.word	0x20012eb8
 80021f4:	20012eb4 	.word	0x20012eb4
 80021f8:	20012ebc 	.word	0x20012ebc

080021fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <prvInsertBlockIntoFreeList+0xac>)
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e002      	b.n	8002210 <prvInsertBlockIntoFreeList+0x14>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d8f7      	bhi.n	800220a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	4413      	add	r3, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d108      	bne.n	800223e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	441a      	add	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	441a      	add	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d118      	bne.n	8002284 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <prvInsertBlockIntoFreeList+0xb0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d00d      	beq.n	800227a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	441a      	add	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e008      	b.n	800228c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <prvInsertBlockIntoFreeList+0xb0>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e003      	b.n	800228c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d002      	beq.n	800229a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20012ea8 	.word	0x20012ea8
 80022ac:	20012eb0 	.word	0x20012eb0

080022b0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80022b4:	4803      	ldr	r0, [pc, #12]	; (80022c4 <_cbSendSystemDesc+0x14>)
 80022b6:	f001 f969 	bl	800358c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80022ba:	4803      	ldr	r0, [pc, #12]	; (80022c8 <_cbSendSystemDesc+0x18>)
 80022bc:	f001 f966 	bl	800358c <SEGGER_SYSVIEW_SendSysDesc>
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	08004580 	.word	0x08004580
 80022c8:	080045c8 	.word	0x080045c8

080022cc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <SEGGER_SYSVIEW_Conf+0x20>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SEGGER_SYSVIEW_Conf+0x20>)
 80022d6:	6819      	ldr	r1, [r3, #0]
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SEGGER_SYSVIEW_Conf+0x24>)
 80022da:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <SEGGER_SYSVIEW_Conf+0x28>)
 80022dc:	f000 fd4c 	bl	8002d78 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80022e0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80022e4:	f000 fd86 	bl	8002df4 <SEGGER_SYSVIEW_SetRAMBase>
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000000 	.word	0x20000000
 80022f0:	080022b1 	.word	0x080022b1
 80022f4:	08004660 	.word	0x08004660

080022f8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80022f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	e034      	b.n	800236e <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002304:	491e      	ldr	r1, [pc, #120]	; (8002380 <_cbSendTaskList+0x88>)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	491a      	ldr	r1, [pc, #104]	; (8002380 <_cbSendTaskList+0x88>)
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3304      	adds	r3, #4
 8002324:	681c      	ldr	r4, [r3, #0]
 8002326:	4916      	ldr	r1, [pc, #88]	; (8002380 <_cbSendTaskList+0x88>)
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3308      	adds	r3, #8
 8002336:	681d      	ldr	r5, [r3, #0]
 8002338:	4911      	ldr	r1, [pc, #68]	; (8002380 <_cbSendTaskList+0x88>)
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	330c      	adds	r3, #12
 8002348:	681e      	ldr	r6, [r3, #0]
 800234a:	490d      	ldr	r1, [pc, #52]	; (8002380 <_cbSendTaskList+0x88>)
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	3310      	adds	r3, #16
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	4633      	mov	r3, r6
 8002360:	462a      	mov	r2, r5
 8002362:	4621      	mov	r1, r4
 8002364:	f000 f8b4 	bl	80024d0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3301      	adds	r3, #1
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <_cbSendTaskList+0x8c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d3c5      	bcc.n	8002304 <_cbSendTaskList+0xc>
  }
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002380:	20012ec0 	.word	0x20012ec0
 8002384:	20012f60 	.word	0x20012f60

08002388 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800238e:	f7fe ffe5 	bl	800135c <xTaskGetTickCountFromISR>
 8002392:	4603      	mov	r3, r0
 8002394:	f04f 0400 	mov.w	r4, #0
 8002398:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800239c:	e9d7 5600 	ldrd	r5, r6, [r7]
 80023a0:	462b      	mov	r3, r5
 80023a2:	4634      	mov	r4, r6
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	0162      	lsls	r2, r4, #5
 80023ae:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80023b2:	0159      	lsls	r1, r3, #5
 80023b4:	460b      	mov	r3, r1
 80023b6:	4614      	mov	r4, r2
 80023b8:	1b5b      	subs	r3, r3, r5
 80023ba:	eb64 0406 	sbc.w	r4, r4, r6
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	00a2      	lsls	r2, r4, #2
 80023c8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80023cc:	0099      	lsls	r1, r3, #2
 80023ce:	460b      	mov	r3, r1
 80023d0:	4614      	mov	r4, r2
 80023d2:	195b      	adds	r3, r3, r5
 80023d4:	eb44 0406 	adc.w	r4, r4, r6
 80023d8:	f04f 0100 	mov.w	r1, #0
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	00e2      	lsls	r2, r4, #3
 80023e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023e6:	00d9      	lsls	r1, r3, #3
 80023e8:	460b      	mov	r3, r1
 80023ea:	4614      	mov	r4, r2
 80023ec:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80023f0:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	4621      	mov	r1, r4
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002400 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800240e:	2205      	movs	r2, #5
 8002410:	492b      	ldr	r1, [pc, #172]	; (80024c0 <SYSVIEW_AddTask+0xc0>)
 8002412:	68b8      	ldr	r0, [r7, #8]
 8002414:	f001 fc3e 	bl	8003c94 <memcmp>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d04b      	beq.n	80024b6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <SYSVIEW_AddTask+0xc4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b07      	cmp	r3, #7
 8002424:	d903      	bls.n	800242e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002426:	4828      	ldr	r0, [pc, #160]	; (80024c8 <SYSVIEW_AddTask+0xc8>)
 8002428:	f001 fbb4 	bl	8003b94 <SEGGER_SYSVIEW_Warn>
    return;
 800242c:	e044      	b.n	80024b8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800242e:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <SYSVIEW_AddTask+0xc4>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4926      	ldr	r1, [pc, #152]	; (80024cc <SYSVIEW_AddTask+0xcc>)
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <SYSVIEW_AddTask+0xc4>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4921      	ldr	r1, [pc, #132]	; (80024cc <SYSVIEW_AddTask+0xcc>)
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3304      	adds	r3, #4
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <SYSVIEW_AddTask+0xc4>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	491b      	ldr	r1, [pc, #108]	; (80024cc <SYSVIEW_AddTask+0xcc>)
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3308      	adds	r3, #8
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <SYSVIEW_AddTask+0xc4>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4916      	ldr	r1, [pc, #88]	; (80024cc <SYSVIEW_AddTask+0xcc>)
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	330c      	adds	r3, #12
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <SYSVIEW_AddTask+0xc4>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4910      	ldr	r1, [pc, #64]	; (80024cc <SYSVIEW_AddTask+0xcc>)
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3310      	adds	r3, #16
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <SYSVIEW_AddTask+0xc4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <SYSVIEW_AddTask+0xc4>)
 80024a2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f80e 	bl	80024d0 <SYSVIEW_SendTaskInfo>
 80024b4:	e000      	b.n	80024b8 <SYSVIEW_AddTask+0xb8>
    return;
 80024b6:	bf00      	nop

}
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	080045d8 	.word	0x080045d8
 80024c4:	20012f60 	.word	0x20012f60
 80024c8:	080045e0 	.word	0x080045e0
 80024cc:	20012ec0 	.word	0x20012ec0

080024d0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	2214      	movs	r2, #20
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 fbee 	bl	8003cc8 <memset>
  TaskInfo.TaskID     = TaskID;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4618      	mov	r0, r3
 8002506:	f000 ff47 	bl	8003398 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	; 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <_DoInit+0x8c>)
 800251c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2203      	movs	r2, #3
 8002522:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2203      	movs	r2, #3
 8002528:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1d      	ldr	r2, [pc, #116]	; (80025a4 <_DoInit+0x90>)
 800252e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <_DoInit+0x94>)
 8002534:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <_DoInit+0x90>)
 8002554:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <_DoInit+0x98>)
 800255a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2210      	movs	r2, #16
 8002560:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3307      	adds	r3, #7
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <_DoInit+0x9c>)
 800257a:	6810      	ldr	r0, [r2, #0]
 800257c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <_DoInit+0xa0>)
 8002582:	6810      	ldr	r0, [r2, #0]
 8002584:	6018      	str	r0, [r3, #0]
 8002586:	8891      	ldrh	r1, [r2, #4]
 8002588:	7992      	ldrb	r2, [r2, #6]
 800258a:	8099      	strh	r1, [r3, #4]
 800258c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	719a      	strb	r2, [r3, #6]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	2001749c 	.word	0x2001749c
 80025a4:	08004630 	.word	0x08004630
 80025a8:	20012f64 	.word	0x20012f64
 80025ac:	20013364 	.word	0x20013364
 80025b0:	0800463c 	.word	0x0800463c
 80025b4:	08004640 	.word	0x08004640

080025b8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80025c4:	4b3c      	ldr	r3, [pc, #240]	; (80026b8 <SEGGER_RTT_ReadNoLock+0x100>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <SEGGER_RTT_ReadNoLock+0x18>
 80025cc:	f7ff ffa2 	bl	8002514 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4613      	mov	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	4a36      	ldr	r2, [pc, #216]	; (80026b8 <SEGGER_RTT_ReadNoLock+0x100>)
 80025de:	4413      	add	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80025f6:	6a3a      	ldr	r2, [r7, #32]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d92a      	bls.n	8002654 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4293      	cmp	r3, r2
 800260e:	bf28      	it	cs
 8002610:	4613      	movcs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	4413      	add	r3, r2
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4619      	mov	r1, r3
 8002620:	69f8      	ldr	r0, [r7, #28]
 8002622:	f001 fb46 	bl	8003cb2 <memcpy>
    NumBytesRead += NumBytesRem;
 8002626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800263e:	6a3a      	ldr	r2, [r7, #32]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	6a3a      	ldr	r2, [r7, #32]
 800264c:	429a      	cmp	r2, r3
 800264e:	d101      	bne.n	8002654 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002650:	2300      	movs	r3, #0
 8002652:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4293      	cmp	r3, r2
 8002662:	bf28      	it	cs
 8002664:	4613      	movcs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d018      	beq.n	80026a0 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	4413      	add	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4619      	mov	r1, r3
 800267a:	69f8      	ldr	r0, [r7, #28]
 800267c:	f001 fb19 	bl	8003cb2 <memcpy>
    NumBytesRead += NumBytesRem;
 8002680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4413      	add	r3, r2
 800269e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	6a3a      	ldr	r2, [r7, #32]
 80026aa:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3728      	adds	r7, #40	; 0x28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2001749c 	.word	0x2001749c

080026bc <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4a3f      	ldr	r2, [pc, #252]	; (80027d8 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 80026da:	4413      	add	r3, r2
 80026dc:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d854      	bhi.n	800279c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d30f      	bcc.n	8002726 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4413      	add	r3, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002712:	4618      	mov	r0, r3
 8002714:	f001 facd 	bl	8003cb2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	441a      	add	r2, r3
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002722:	2301      	movs	r3, #1
 8002724:	e054      	b.n	80027d0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	d34b      	bcc.n	80027ce <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	429a      	cmp	r2, r3
 8002746:	d90e      	bls.n	8002766 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002754:	4618      	mov	r0, r3
 8002756:	f001 faac 	bl	8003cb2 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	441a      	add	r2, r3
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	e018      	b.n	8002798 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002772:	4618      	mov	r0, r3
 8002774:	f001 fa9d 	bl	8003cb2 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	6858      	ldr	r0, [r3, #4]
 800277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	18d1      	adds	r1, r2, r3
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	461a      	mov	r2, r3
 800278a:	f001 fa92 	bl	8003cb2 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad2      	subs	r2, r2, r3
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002798:	2301      	movs	r3, #1
 800279a:	e019      	b.n	80027d0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d30f      	bcc.n	80027ce <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4413      	add	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fa79 	bl	8003cb2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	441a      	add	r2, r3
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2001749c 	.word	0x2001749c

080027dc <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80027ea:	4b30      	ldr	r3, [pc, #192]	; (80028ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80027f2:	f7ff fe8f 	bl	8002514 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80027f6:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4293      	cmp	r3, r2
 8002800:	d24c      	bcs.n	800289c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002802:	f3ef 8311 	mrs	r3, BASEPRI
 8002806:	f04f 0120 	mov.w	r1, #32
 800280a:	f381 8811 	msr	BASEPRI, r1
 800280e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d032      	beq.n	800287c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002816:	4925      	ldr	r1, [pc, #148]	; (80028ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800282a:	4920      	ldr	r1, [pc, #128]	; (80028ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	3304      	adds	r3, #4
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002840:	491a      	ldr	r1, [pc, #104]	; (80028ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	3320      	adds	r3, #32
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002854:	4915      	ldr	r1, [pc, #84]	; (80028ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	3328      	adds	r3, #40	; 0x28
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002868:	4910      	ldr	r1, [pc, #64]	; (80028ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800287c:	490b      	ldr	r1, [pc, #44]	; (80028ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	332c      	adds	r3, #44	; 0x2c
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	e002      	b.n	80028a2 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80028a2:	697b      	ldr	r3, [r7, #20]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	2001749c 	.word	0x2001749c

080028b0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80028c6:	f7ff fe25 	bl	8002514 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80028ca:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d24b      	bcs.n	800296e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80028d6:	f3ef 8311 	mrs	r3, BASEPRI
 80028da:	f04f 0120 	mov.w	r1, #32
 80028de:	f381 8811 	msr	BASEPRI, r1
 80028e2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d031      	beq.n	800294e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80028ea:	4925      	ldr	r1, [pc, #148]	; (8002980 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	3360      	adds	r3, #96	; 0x60
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80028fe:	4920      	ldr	r1, [pc, #128]	; (8002980 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	3364      	adds	r3, #100	; 0x64
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002912:	491b      	ldr	r1, [pc, #108]	; (8002980 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	3368      	adds	r3, #104	; 0x68
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002926:	4916      	ldr	r1, [pc, #88]	; (8002980 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	3370      	adds	r3, #112	; 0x70
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800293a:	4911      	ldr	r1, [pc, #68]	; (8002980 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	336c      	adds	r3, #108	; 0x6c
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800294e:	490c      	ldr	r1, [pc, #48]	; (8002980 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	3374      	adds	r3, #116	; 0x74
 800295e:	6a3a      	ldr	r2, [r7, #32]
 8002960:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	e002      	b.n	8002974 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002974:	697b      	ldr	r3, [r7, #20]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	2001749c 	.word	0x2001749c

08002984 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002994:	e002      	b.n	800299c <_EncodeStr+0x18>
    Len++;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	3301      	adds	r3, #1
 800299a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f6      	bne.n	8002996 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d901      	bls.n	80029b4 <_EncodeStr+0x30>
    Len = Limit;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2bfe      	cmp	r3, #254	; 0xfe
 80029b8:	d806      	bhi.n	80029c8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	60fa      	str	r2, [r7, #12]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e011      	b.n	80029ec <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	60fa      	str	r2, [r7, #12]
 80029ce:	22ff      	movs	r2, #255	; 0xff
 80029d0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	60fa      	str	r2, [r7, #12]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	0a19      	lsrs	r1, r3, #8
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	60fa      	str	r2, [r7, #12]
 80029e8:	b2ca      	uxtb	r2, r1
 80029ea:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80029f0:	e00a      	b.n	8002a08 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	1c53      	adds	r3, r2, #1
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1c59      	adds	r1, r3, #1
 80029fc:	60f9      	str	r1, [r7, #12]
 80029fe:	7812      	ldrb	r2, [r2, #0]
 8002a00:	701a      	strb	r2, [r3, #0]
    n++;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d3f0      	bcc.n	80029f2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8002a10:	68fb      	ldr	r3, [r7, #12]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002a3c:	1cfb      	adds	r3, r7, #3
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4619      	mov	r1, r3
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff fdb8 	bl	80025b8 <SEGGER_RTT_ReadNoLock>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	dd44      	ble.n	8002adc <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d01a      	beq.n	8002a8e <_HandleIncomingPacket+0x58>
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	dc06      	bgt.n	8002a6a <_HandleIncomingPacket+0x34>
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d010      	beq.n	8002a82 <_HandleIncomingPacket+0x4c>
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	dc11      	bgt.n	8002a88 <_HandleIncomingPacket+0x52>
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d009      	beq.n	8002a7c <_HandleIncomingPacket+0x46>
 8002a68:	e02d      	b.n	8002ac6 <_HandleIncomingPacket+0x90>
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d015      	beq.n	8002a9a <_HandleIncomingPacket+0x64>
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	db10      	blt.n	8002a94 <_HandleIncomingPacket+0x5e>
 8002a72:	2b07      	cmp	r3, #7
 8002a74:	d014      	beq.n	8002aa0 <_HandleIncomingPacket+0x6a>
 8002a76:	2b80      	cmp	r3, #128	; 0x80
 8002a78:	d015      	beq.n	8002aa6 <_HandleIncomingPacket+0x70>
 8002a7a:	e024      	b.n	8002ac6 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002a7c:	f000 fb10 	bl	80030a0 <SEGGER_SYSVIEW_Start>
      break;
 8002a80:	e031      	b.n	8002ae6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002a82:	f000 fbc9 	bl	8003218 <SEGGER_SYSVIEW_Stop>
      break;
 8002a86:	e02e      	b.n	8002ae6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002a88:	f000 fda4 	bl	80035d4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002a8c:	e02b      	b.n	8002ae6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002a8e:	f000 fd69 	bl	8003564 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002a92:	e028      	b.n	8002ae6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002a94:	f000 fbe6 	bl	8003264 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002a98:	e025      	b.n	8002ae6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002a9a:	f001 f83d 	bl	8003b18 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002a9e:	e022      	b.n	8002ae6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002aa0:	f001 f81c 	bl	8003adc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002aa4:	e01f      	b.n	8002ae6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002aa6:	1cfb      	adds	r3, r7, #3
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4619      	mov	r1, r3
 8002aac:	2001      	movs	r0, #1
 8002aae:	f7ff fd83 	bl	80025b8 <SEGGER_RTT_ReadNoLock>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	dd11      	ble.n	8002ae0 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 ff8c 	bl	80039dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002ac4:	e00c      	b.n	8002ae0 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	da0a      	bge.n	8002ae4 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002ace:	1cfb      	adds	r3, r7, #3
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	f7ff fd6f 	bl	80025b8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002ada:	e003      	b.n	8002ae4 <_HandleIncomingPacket+0xae>
    }
  }
 8002adc:	bf00      	nop
 8002ade:	e002      	b.n	8002ae6 <_HandleIncomingPacket+0xb0>
      break;
 8002ae0:	bf00      	nop
 8002ae2:	e000      	b.n	8002ae6 <_HandleIncomingPacket+0xb0>
      break;
 8002ae4:	bf00      	nop
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	; 0x30
 8002af4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002af6:	2301      	movs	r3, #1
 8002af8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <_TrySendOverflowPacket+0xd8>)
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0a:	e00b      	b.n	8002b24 <_TrySendOverflowPacket+0x34>
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	1c59      	adds	r1, r3, #1
 8002b14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	09db      	lsrs	r3, r3, #7
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	2b7f      	cmp	r3, #127	; 0x7f
 8002b28:	d8f0      	bhi.n	8002b0c <_TrySendOverflowPacket+0x1c>
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <_TrySendOverflowPacket+0xdc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002b40:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <_TrySendOverflowPacket+0xd8>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	623b      	str	r3, [r7, #32]
 8002b52:	e00b      	b.n	8002b6c <_TrySendOverflowPacket+0x7c>
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	1c59      	adds	r1, r3, #1
 8002b5c:	6279      	str	r1, [r7, #36]	; 0x24
 8002b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	09db      	lsrs	r3, r3, #7
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b70:	d8f0      	bhi.n	8002b54 <_TrySendOverflowPacket+0x64>
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	627a      	str	r2, [r7, #36]	; 0x24
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f7ff fd94 	bl	80026bc <SEGGER_RTT_WriteSkipNoLock>
 8002b94:	4603      	mov	r3, r0
 8002b96:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <_TrySendOverflowPacket+0xd8>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <_TrySendOverflowPacket+0xd8>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <_TrySendOverflowPacket+0xd8>)
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e004      	b.n	8002bbc <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <_TrySendOverflowPacket+0xd8>)
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <_TrySendOverflowPacket+0xd8>)
 8002bba:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002bbc:	693b      	ldr	r3, [r7, #16]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3730      	adds	r7, #48	; 0x30
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	2001737c 	.word	0x2001737c
 8002bcc:	e0001004 	.word	0xe0001004

08002bd0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002bdc:	4b63      	ldr	r3, [pc, #396]	; (8002d6c <_SendPacket+0x19c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d010      	beq.n	8002c06 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002be4:	4b61      	ldr	r3, [pc, #388]	; (8002d6c <_SendPacket+0x19c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80a1 	beq.w	8002d30 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002bee:	4b5f      	ldr	r3, [pc, #380]	; (8002d6c <_SendPacket+0x19c>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d109      	bne.n	8002c0a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002bf6:	f7ff ff7b 	bl	8002af0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002bfa:	4b5c      	ldr	r3, [pc, #368]	; (8002d6c <_SendPacket+0x19c>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	f040 8098 	bne.w	8002d34 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8002c04:	e001      	b.n	8002c0a <_SendPacket+0x3a>
    goto Send;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <_SendPacket+0x3c>
Send:
 8002c0a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b1f      	cmp	r3, #31
 8002c10:	d809      	bhi.n	8002c26 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002c12:	4b56      	ldr	r3, [pc, #344]	; (8002d6c <_SendPacket+0x19c>)
 8002c14:	69da      	ldr	r2, [r3, #28]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 8089 	bne.w	8002d38 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b17      	cmp	r3, #23
 8002c2a:	d807      	bhi.n	8002c3c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e03d      	b.n	8002cb8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b7f      	cmp	r3, #127	; 0x7f
 8002c48:	d912      	bls.n	8002c70 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	09da      	lsrs	r2, r3, #7
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	3a01      	subs	r2, #1
 8002c62:	60fa      	str	r2, [r7, #12]
 8002c64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e006      	b.n	8002c7e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b7f      	cmp	r3, #127	; 0x7f
 8002c82:	d912      	bls.n	8002caa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	09da      	lsrs	r2, r3, #7
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	60fa      	str	r2, [r7, #12]
 8002c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e006      	b.n	8002cb8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002cb8:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <_SendPacket+0x1a0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002cbe:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <_SendPacket+0x19c>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	e00b      	b.n	8002cea <_SendPacket+0x11a>
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	1c59      	adds	r1, r3, #1
 8002cda:	6279      	str	r1, [r7, #36]	; 0x24
 8002cdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	09db      	lsrs	r3, r3, #7
 8002ce8:	623b      	str	r3, [r7, #32]
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	2b7f      	cmp	r3, #127	; 0x7f
 8002cee:	d8f0      	bhi.n	8002cd2 <_SendPacket+0x102>
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	627a      	str	r2, [r7, #36]	; 0x24
 8002cf6:	6a3a      	ldr	r2, [r7, #32]
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f7ff fcd6 	bl	80026bc <SEGGER_RTT_WriteSkipNoLock>
 8002d10:	4603      	mov	r3, r0
 8002d12:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002d1a:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <_SendPacket+0x19c>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	60d3      	str	r3, [r2, #12]
 8002d20:	e00b      	b.n	8002d3a <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002d22:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <_SendPacket+0x19c>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <_SendPacket+0x19c>)
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	e004      	b.n	8002d3a <_SendPacket+0x16a>
    goto SendDone;
 8002d30:	bf00      	nop
 8002d32:	e002      	b.n	8002d3a <_SendPacket+0x16a>
      goto SendDone;
 8002d34:	bf00      	nop
 8002d36:	e000      	b.n	8002d3a <_SendPacket+0x16a>
      goto SendDone;
 8002d38:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <_SendPacket+0x1a4>)
 8002d3c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <_SendPacket+0x1a4>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d00b      	beq.n	8002d62 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <_SendPacket+0x19c>)
 8002d4c:	789b      	ldrb	r3, [r3, #2]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d107      	bne.n	8002d62 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <_SendPacket+0x19c>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002d58:	f7ff fe6d 	bl	8002a36 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <_SendPacket+0x19c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002d62:	bf00      	nop
 8002d64:	3728      	adds	r7, #40	; 0x28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2001737c 	.word	0x2001737c
 8002d70:	e0001004 	.word	0xe0001004
 8002d74:	2001749c 	.word	0x2001749c

08002d78 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002d86:	2300      	movs	r3, #0
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d8e:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <SEGGER_SYSVIEW_Init+0x68>)
 8002d90:	4914      	ldr	r1, [pc, #80]	; (8002de4 <SEGGER_SYSVIEW_Init+0x6c>)
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7ff fd22 	bl	80027dc <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <SEGGER_SYSVIEW_Init+0x70>)
 8002da0:	4910      	ldr	r1, [pc, #64]	; (8002de4 <SEGGER_SYSVIEW_Init+0x6c>)
 8002da2:	2001      	movs	r0, #1
 8002da4:	f7ff fd84 	bl	80028b0 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <SEGGER_SYSVIEW_Init+0x74>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dae:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <SEGGER_SYSVIEW_Init+0x78>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <SEGGER_SYSVIEW_Init+0x74>)
 8002db6:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002db8:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <SEGGER_SYSVIEW_Init+0x74>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <SEGGER_SYSVIEW_Init+0x74>)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002dc4:	4a09      	ldr	r2, [pc, #36]	; (8002dec <SEGGER_SYSVIEW_Init+0x74>)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002dca:	4a08      	ldr	r2, [pc, #32]	; (8002dec <SEGGER_SYSVIEW_Init+0x74>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <SEGGER_SYSVIEW_Init+0x74>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20013374 	.word	0x20013374
 8002de4:	08004648 	.word	0x08004648
 8002de8:	20017374 	.word	0x20017374
 8002dec:	2001737c 	.word	0x2001737c
 8002df0:	e0001004 	.word	0xe0001004

08002df4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6113      	str	r3, [r2, #16]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	2001737c 	.word	0x2001737c

08002e14 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e20:	f04f 0120 	mov.w	r1, #32
 8002e24:	f381 8811 	msr	BASEPRI, r1
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4808      	ldr	r0, [pc, #32]	; (8002e4c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002e2c:	f7ff fdf7 	bl	8002a1e <_PreparePacket>
 8002e30:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	68b8      	ldr	r0, [r7, #8]
 8002e38:	f7ff feca 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f383 8811 	msr	BASEPRI, r3
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200173ac 	.word	0x200173ac

08002e50 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002e5a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e5e:	f04f 0120 	mov.w	r1, #32
 8002e62:	f381 8811 	msr	BASEPRI, r1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	4816      	ldr	r0, [pc, #88]	; (8002ec4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002e6a:	f7ff fdd8 	bl	8002a1e <_PreparePacket>
 8002e6e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	e00b      	b.n	8002e96 <SEGGER_SYSVIEW_RecordU32+0x46>
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	1c59      	adds	r1, r3, #1
 8002e86:	61f9      	str	r1, [r7, #28]
 8002e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	09db      	lsrs	r3, r3, #7
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b7f      	cmp	r3, #127	; 0x7f
 8002e9a:	d8f0      	bhi.n	8002e7e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	61fa      	str	r2, [r7, #28]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68f9      	ldr	r1, [r7, #12]
 8002eb0:	6938      	ldr	r0, [r7, #16]
 8002eb2:	f7ff fe8d 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f383 8811 	msr	BASEPRI, r3
}
 8002ebc:	bf00      	nop
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	200173ac 	.word	0x200173ac

08002ec8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08c      	sub	sp, #48	; 0x30
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ed8:	f04f 0120 	mov.w	r1, #32
 8002edc:	f381 8811 	msr	BASEPRI, r1
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	4825      	ldr	r0, [pc, #148]	; (8002f78 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002ee4:	f7ff fd9b 	bl	8002a1e <_PreparePacket>
 8002ee8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef6:	e00b      	b.n	8002f10 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	1c59      	adds	r1, r3, #1
 8002f00:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	09db      	lsrs	r3, r3, #7
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	2b7f      	cmp	r3, #127	; 0x7f
 8002f14:	d8f0      	bhi.n	8002ef8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	623b      	str	r3, [r7, #32]
 8002f2e:	e00b      	b.n	8002f48 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	1c59      	adds	r1, r3, #1
 8002f38:	6279      	str	r1, [r7, #36]	; 0x24
 8002f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	09db      	lsrs	r3, r3, #7
 8002f46:	623b      	str	r3, [r7, #32]
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f4c:	d8f0      	bhi.n	8002f30 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	627a      	str	r2, [r7, #36]	; 0x24
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	6979      	ldr	r1, [r7, #20]
 8002f62:	69b8      	ldr	r0, [r7, #24]
 8002f64:	f7ff fe34 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f383 8811 	msr	BASEPRI, r3
}
 8002f6e:	bf00      	nop
 8002f70:	3730      	adds	r7, #48	; 0x30
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200173ac 	.word	0x200173ac

08002f7c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b090      	sub	sp, #64	; 0x40
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f8e:	f04f 0120 	mov.w	r1, #32
 8002f92:	f381 8811 	msr	BASEPRI, r1
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	4840      	ldr	r0, [pc, #256]	; (800309c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8002f9a:	f7ff fd40 	bl	8002a1e <_PreparePacket>
 8002f9e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fac:	e00b      	b.n	8002fc6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002fb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	09db      	lsrs	r3, r3, #7
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8002fca:	d8f0      	bhi.n	8002fae <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8002fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe4:	e00b      	b.n	8002ffe <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fec:	1c59      	adds	r1, r3, #1
 8002fee:	6379      	str	r1, [r7, #52]	; 0x34
 8002ff0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	09db      	lsrs	r3, r3, #7
 8002ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	2b7f      	cmp	r3, #127	; 0x7f
 8003002:	d8f0      	bhi.n	8002fe6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	637a      	str	r2, [r7, #52]	; 0x34
 800300a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003012:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
 800301c:	e00b      	b.n	8003036 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	b2da      	uxtb	r2, r3
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	1c59      	adds	r1, r3, #1
 8003026:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003028:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	09db      	lsrs	r3, r3, #7
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	2b7f      	cmp	r3, #127	; 0x7f
 800303a:	d8f0      	bhi.n	800301e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	e00b      	b.n	800306e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	1c59      	adds	r1, r3, #1
 800305e:	6279      	str	r1, [r7, #36]	; 0x24
 8003060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	09db      	lsrs	r3, r3, #7
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2b7f      	cmp	r3, #127	; 0x7f
 8003072:	d8f0      	bhi.n	8003056 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	627a      	str	r2, [r7, #36]	; 0x24
 800307a:	6a3a      	ldr	r2, [r7, #32]
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	6979      	ldr	r1, [r7, #20]
 8003088:	69b8      	ldr	r0, [r7, #24]
 800308a:	f7ff fda1 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f383 8811 	msr	BASEPRI, r3
}
 8003094:	bf00      	nop
 8003096:	3740      	adds	r7, #64	; 0x40
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	200173ac 	.word	0x200173ac

080030a0 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	; 0x30
 80030a4:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80030a6:	4b59      	ldr	r3, [pc, #356]	; (800320c <SEGGER_SYSVIEW_Start+0x16c>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f040 80aa 	bne.w	8003204 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80030b0:	4b56      	ldr	r3, [pc, #344]	; (800320c <SEGGER_SYSVIEW_Start+0x16c>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80030b6:	f3ef 8311 	mrs	r3, BASEPRI
 80030ba:	f04f 0120 	mov.w	r1, #32
 80030be:	f381 8811 	msr	BASEPRI, r1
 80030c2:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80030c4:	220a      	movs	r2, #10
 80030c6:	4952      	ldr	r1, [pc, #328]	; (8003210 <SEGGER_SYSVIEW_Start+0x170>)
 80030c8:	2001      	movs	r0, #1
 80030ca:	f7ff faf7 	bl	80026bc <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80030d4:	200a      	movs	r0, #10
 80030d6:	f7ff fe9d 	bl	8002e14 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80030da:	f3ef 8311 	mrs	r3, BASEPRI
 80030de:	f04f 0120 	mov.w	r1, #32
 80030e2:	f381 8811 	msr	BASEPRI, r1
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	484a      	ldr	r0, [pc, #296]	; (8003214 <SEGGER_SYSVIEW_Start+0x174>)
 80030ea:	f7ff fc98 	bl	8002a1e <_PreparePacket>
 80030ee:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f8:	4b44      	ldr	r3, [pc, #272]	; (800320c <SEGGER_SYSVIEW_Start+0x16c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030fe:	e00b      	b.n	8003118 <SEGGER_SYSVIEW_Start+0x78>
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	b2da      	uxtb	r2, r3
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	62f9      	str	r1, [r7, #44]	; 0x2c
 800310a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	09db      	lsrs	r3, r3, #7
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	2b7f      	cmp	r3, #127	; 0x7f
 800311c:	d8f0      	bhi.n	8003100 <SEGGER_SYSVIEW_Start+0x60>
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <SEGGER_SYSVIEW_Start+0x16c>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	e00b      	b.n	8003152 <SEGGER_SYSVIEW_Start+0xb2>
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	1c59      	adds	r1, r3, #1
 8003142:	6279      	str	r1, [r7, #36]	; 0x24
 8003144:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	09db      	lsrs	r3, r3, #7
 8003150:	623b      	str	r3, [r7, #32]
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	2b7f      	cmp	r3, #127	; 0x7f
 8003156:	d8f0      	bhi.n	800313a <SEGGER_SYSVIEW_Start+0x9a>
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	627a      	str	r2, [r7, #36]	; 0x24
 800315e:	6a3a      	ldr	r2, [r7, #32]
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <SEGGER_SYSVIEW_Start+0x16c>)
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	e00b      	b.n	800318c <SEGGER_SYSVIEW_Start+0xec>
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	1c59      	adds	r1, r3, #1
 800317c:	61f9      	str	r1, [r7, #28]
 800317e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	09db      	lsrs	r3, r3, #7
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b7f      	cmp	r3, #127	; 0x7f
 8003190:	d8f0      	bhi.n	8003174 <SEGGER_SYSVIEW_Start+0xd4>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	61fa      	str	r2, [r7, #28]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	2302      	movs	r3, #2
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	e00b      	b.n	80031c4 <SEGGER_SYSVIEW_Start+0x124>
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	1c59      	adds	r1, r3, #1
 80031b4:	6179      	str	r1, [r7, #20]
 80031b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	09db      	lsrs	r3, r3, #7
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b7f      	cmp	r3, #127	; 0x7f
 80031c8:	d8f0      	bhi.n	80031ac <SEGGER_SYSVIEW_Start+0x10c>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	617a      	str	r2, [r7, #20]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80031da:	2218      	movs	r2, #24
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff fcf6 	bl	8002bd0 <_SendPacket>
      RECORD_END();
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <SEGGER_SYSVIEW_Start+0x16c>)
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <SEGGER_SYSVIEW_Start+0x16c>)
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80031f8:	f000 f9ec 	bl	80035d4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80031fc:	f000 f9b2 	bl	8003564 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003200:	f000 fc8a 	bl	8003b18 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003204:	bf00      	nop
 8003206:	3730      	adds	r7, #48	; 0x30
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	2001737c 	.word	0x2001737c
 8003210:	08004668 	.word	0x08004668
 8003214:	200173ac 	.word	0x200173ac

08003218 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800321e:	f3ef 8311 	mrs	r3, BASEPRI
 8003222:	f04f 0120 	mov.w	r1, #32
 8003226:	f381 8811 	msr	BASEPRI, r1
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	480b      	ldr	r0, [pc, #44]	; (800325c <SEGGER_SYSVIEW_Stop+0x44>)
 800322e:	f7ff fbf6 	bl	8002a1e <_PreparePacket>
 8003232:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <SEGGER_SYSVIEW_Stop+0x48>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800323c:	220b      	movs	r2, #11
 800323e:	6839      	ldr	r1, [r7, #0]
 8003240:	6838      	ldr	r0, [r7, #0]
 8003242:	f7ff fcc5 	bl	8002bd0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <SEGGER_SYSVIEW_Stop+0x48>)
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f383 8811 	msr	BASEPRI, r3
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	200173ac 	.word	0x200173ac
 8003260:	2001737c 	.word	0x2001737c

08003264 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b08c      	sub	sp, #48	; 0x30
 8003268:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800326a:	f3ef 8311 	mrs	r3, BASEPRI
 800326e:	f04f 0120 	mov.w	r1, #32
 8003272:	f381 8811 	msr	BASEPRI, r1
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	4845      	ldr	r0, [pc, #276]	; (8003390 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800327a:	f7ff fbd0 	bl	8002a1e <_PreparePacket>
 800327e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003288:	4b42      	ldr	r3, [pc, #264]	; (8003394 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
 800328e:	e00b      	b.n	80032a8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	b2da      	uxtb	r2, r3
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	62f9      	str	r1, [r7, #44]	; 0x2c
 800329a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	09db      	lsrs	r3, r3, #7
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	2b7f      	cmp	r3, #127	; 0x7f
 80032ac:	d8f0      	bhi.n	8003290 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	e00b      	b.n	80032e2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	1c59      	adds	r1, r3, #1
 80032d2:	6279      	str	r1, [r7, #36]	; 0x24
 80032d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	09db      	lsrs	r3, r3, #7
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	2b7f      	cmp	r3, #127	; 0x7f
 80032e6:	d8f0      	bhi.n	80032ca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	627a      	str	r2, [r7, #36]	; 0x24
 80032ee:	6a3a      	ldr	r2, [r7, #32]
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e00b      	b.n	800331c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	1c59      	adds	r1, r3, #1
 800330c:	61f9      	str	r1, [r7, #28]
 800330e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	09db      	lsrs	r3, r3, #7
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b7f      	cmp	r3, #127	; 0x7f
 8003320:	d8f0      	bhi.n	8003304 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	61fa      	str	r2, [r7, #28]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	2302      	movs	r3, #2
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e00b      	b.n	8003354 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	1c59      	adds	r1, r3, #1
 8003344:	6179      	str	r1, [r7, #20]
 8003346:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	09db      	lsrs	r3, r3, #7
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b7f      	cmp	r3, #127	; 0x7f
 8003358:	d8f0      	bhi.n	800333c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	617a      	str	r2, [r7, #20]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800336a:	2218      	movs	r2, #24
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	68b8      	ldr	r0, [r7, #8]
 8003370:	f7ff fc2e 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	4798      	blx	r3
  }
}
 8003388:	bf00      	nop
 800338a:	3730      	adds	r7, #48	; 0x30
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200173ac 	.word	0x200173ac
 8003394:	2001737c 	.word	0x2001737c

08003398 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b092      	sub	sp, #72	; 0x48
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80033a0:	f3ef 8311 	mrs	r3, BASEPRI
 80033a4:	f04f 0120 	mov.w	r1, #32
 80033a8:	f381 8811 	msr	BASEPRI, r1
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	486b      	ldr	r0, [pc, #428]	; (800355c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80033b0:	f7ff fb35 	bl	8002a1e <_PreparePacket>
 80033b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	647b      	str	r3, [r7, #68]	; 0x44
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	643b      	str	r3, [r7, #64]	; 0x40
 80033cc:	e00b      	b.n	80033e6 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80033ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d4:	1c59      	adds	r1, r3, #1
 80033d6:	6479      	str	r1, [r7, #68]	; 0x44
 80033d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e2:	09db      	lsrs	r3, r3, #7
 80033e4:	643b      	str	r3, [r7, #64]	; 0x40
 80033e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e8:	2b7f      	cmp	r3, #127	; 0x7f
 80033ea:	d8f0      	bhi.n	80033ce <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 80033ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	647a      	str	r2, [r7, #68]	; 0x44
 80033f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
 8003406:	e00b      	b.n	8003420 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	b2da      	uxtb	r2, r3
 800340c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003412:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	09db      	lsrs	r3, r3, #7
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	2b7f      	cmp	r3, #127	; 0x7f
 8003424:	d8f0      	bhi.n	8003408 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800342c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003434:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	4619      	mov	r1, r3
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7ff faa0 	bl	8002984 <_EncodeStr>
 8003444:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003446:	2209      	movs	r2, #9
 8003448:	68f9      	ldr	r1, [r7, #12]
 800344a:	6938      	ldr	r0, [r7, #16]
 800344c:	f7ff fbc0 	bl	8002bd0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
 8003466:	e00b      	b.n	8003480 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	b2da      	uxtb	r2, r3
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346e:	1c59      	adds	r1, r3, #1
 8003470:	6379      	str	r1, [r7, #52]	; 0x34
 8003472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	09db      	lsrs	r3, r3, #7
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	2b7f      	cmp	r3, #127	; 0x7f
 8003484:	d8f0      	bhi.n	8003468 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	637a      	str	r2, [r7, #52]	; 0x34
 800348c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a0:	e00b      	b.n	80034ba <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	1c59      	adds	r1, r3, #1
 80034aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80034ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	09db      	lsrs	r3, r3, #7
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	2b7f      	cmp	r3, #127	; 0x7f
 80034be:	d8f0      	bhi.n	80034a2 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	623b      	str	r3, [r7, #32]
 80034da:	e00b      	b.n	80034f4 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	1c59      	adds	r1, r3, #1
 80034e4:	6279      	str	r1, [r7, #36]	; 0x24
 80034e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	09db      	lsrs	r3, r3, #7
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	2b7f      	cmp	r3, #127	; 0x7f
 80034f8:	d8f0      	bhi.n	80034dc <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	627a      	str	r2, [r7, #36]	; 0x24
 8003500:	6a3a      	ldr	r2, [r7, #32]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	e00b      	b.n	800352c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	1c59      	adds	r1, r3, #1
 800351c:	61f9      	str	r1, [r7, #28]
 800351e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	09db      	lsrs	r3, r3, #7
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b7f      	cmp	r3, #127	; 0x7f
 8003530:	d8f0      	bhi.n	8003514 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	61fa      	str	r2, [r7, #28]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003542:	2215      	movs	r2, #21
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	6938      	ldr	r0, [r7, #16]
 8003548:	f7ff fb42 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f383 8811 	msr	BASEPRI, r3
}
 8003552:	bf00      	nop
 8003554:	3748      	adds	r7, #72	; 0x48
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200173ac 	.word	0x200173ac
 8003560:	2001737c 	.word	0x2001737c

08003564 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800357a:	4b03      	ldr	r3, [pc, #12]	; (8003588 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4798      	blx	r3
  }
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	2001737c 	.word	0x2001737c

0800358c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003594:	f3ef 8311 	mrs	r3, BASEPRI
 8003598:	f04f 0120 	mov.w	r1, #32
 800359c:	f381 8811 	msr	BASEPRI, r1
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	480b      	ldr	r0, [pc, #44]	; (80035d0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80035a4:	f7ff fa3b 	bl	8002a1e <_PreparePacket>
 80035a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	6938      	ldr	r0, [r7, #16]
 80035b0:	f7ff f9e8 	bl	8002984 <_EncodeStr>
 80035b4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80035b6:	220e      	movs	r2, #14
 80035b8:	68f9      	ldr	r1, [r7, #12]
 80035ba:	6938      	ldr	r0, [r7, #16]
 80035bc:	f7ff fb08 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f383 8811 	msr	BASEPRI, r3
}
 80035c6:	bf00      	nop
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200173ac 	.word	0x200173ac

080035d4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d019      	beq.n	8003616 <SEGGER_SYSVIEW_RecordSystime+0x42>
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d014      	beq.n	8003616 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4798      	blx	r3
 80035f4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80035f8:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80035fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	f04f 0400 	mov.w	r4, #0
 8003606:	0013      	movs	r3, r2
 8003608:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800360a:	461a      	mov	r2, r3
 800360c:	4601      	mov	r1, r0
 800360e:	200d      	movs	r0, #13
 8003610:	f7ff fc5a 	bl	8002ec8 <SEGGER_SYSVIEW_RecordU32x2>
 8003614:	e005      	b.n	8003622 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4619      	mov	r1, r3
 800361c:	200c      	movs	r0, #12
 800361e:	f7ff fc17 	bl	8002e50 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bd90      	pop	{r4, r7, pc}
 800362a:	bf00      	nop
 800362c:	2001737c 	.word	0x2001737c
 8003630:	e0001004 	.word	0xe0001004

08003634 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800363a:	f3ef 8311 	mrs	r3, BASEPRI
 800363e:	f04f 0120 	mov.w	r1, #32
 8003642:	f381 8811 	msr	BASEPRI, r1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	4819      	ldr	r0, [pc, #100]	; (80036b0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800364a:	f7ff f9e8 	bl	8002a1e <_PreparePacket>
 800364e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	e00b      	b.n	8003680 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	6179      	str	r1, [r7, #20]
 8003672:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	09db      	lsrs	r3, r3, #7
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b7f      	cmp	r3, #127	; 0x7f
 8003684:	d8f0      	bhi.n	8003668 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	617a      	str	r2, [r7, #20]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003696:	2202      	movs	r2, #2
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	68b8      	ldr	r0, [r7, #8]
 800369c:	f7ff fa98 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f383 8811 	msr	BASEPRI, r3
}
 80036a6:	bf00      	nop
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200173ac 	.word	0x200173ac
 80036b4:	e000ed04 	.word	0xe000ed04

080036b8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80036be:	f3ef 8311 	mrs	r3, BASEPRI
 80036c2:	f04f 0120 	mov.w	r1, #32
 80036c6:	f381 8811 	msr	BASEPRI, r1
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	4807      	ldr	r0, [pc, #28]	; (80036ec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80036ce:	f7ff f9a6 	bl	8002a1e <_PreparePacket>
 80036d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80036d4:	2203      	movs	r2, #3
 80036d6:	6839      	ldr	r1, [r7, #0]
 80036d8:	6838      	ldr	r0, [r7, #0]
 80036da:	f7ff fa79 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f383 8811 	msr	BASEPRI, r3
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200173ac 	.word	0x200173ac

080036f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80036f6:	f3ef 8311 	mrs	r3, BASEPRI
 80036fa:	f04f 0120 	mov.w	r1, #32
 80036fe:	f381 8811 	msr	BASEPRI, r1
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	4807      	ldr	r0, [pc, #28]	; (8003724 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003706:	f7ff f98a 	bl	8002a1e <_PreparePacket>
 800370a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800370c:	2212      	movs	r2, #18
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	6838      	ldr	r0, [r7, #0]
 8003712:	f7ff fa5d 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f383 8811 	msr	BASEPRI, r3
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200173ac 	.word	0x200173ac

08003728 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800372e:	f3ef 8311 	mrs	r3, BASEPRI
 8003732:	f04f 0120 	mov.w	r1, #32
 8003736:	f381 8811 	msr	BASEPRI, r1
 800373a:	607b      	str	r3, [r7, #4]
 800373c:	4807      	ldr	r0, [pc, #28]	; (800375c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800373e:	f7ff f96e 	bl	8002a1e <_PreparePacket>
 8003742:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003744:	2211      	movs	r2, #17
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	6838      	ldr	r0, [r7, #0]
 800374a:	f7ff fa41 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f383 8811 	msr	BASEPRI, r3
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200173ac 	.word	0x200173ac

08003760 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003768:	f3ef 8311 	mrs	r3, BASEPRI
 800376c:	f04f 0120 	mov.w	r1, #32
 8003770:	f381 8811 	msr	BASEPRI, r1
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	481a      	ldr	r0, [pc, #104]	; (80037e0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003778:	f7ff f951 	bl	8002a1e <_PreparePacket>
 800377c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003782:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e00b      	b.n	80037b0 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	1c59      	adds	r1, r3, #1
 80037a0:	61f9      	str	r1, [r7, #28]
 80037a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	09db      	lsrs	r3, r3, #7
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b7f      	cmp	r3, #127	; 0x7f
 80037b4:	d8f0      	bhi.n	8003798 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	61fa      	str	r2, [r7, #28]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80037c6:	2208      	movs	r2, #8
 80037c8:	68f9      	ldr	r1, [r7, #12]
 80037ca:	6938      	ldr	r0, [r7, #16]
 80037cc:	f7ff fa00 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f383 8811 	msr	BASEPRI, r3
}
 80037d6:	bf00      	nop
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200173ac 	.word	0x200173ac
 80037e4:	2001737c 	.word	0x2001737c

080037e8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80037f0:	f3ef 8311 	mrs	r3, BASEPRI
 80037f4:	f04f 0120 	mov.w	r1, #32
 80037f8:	f381 8811 	msr	BASEPRI, r1
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	481a      	ldr	r0, [pc, #104]	; (8003868 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003800:	f7ff f90d 	bl	8002a1e <_PreparePacket>
 8003804:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	e00b      	b.n	8003838 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	1c59      	adds	r1, r3, #1
 8003828:	61f9      	str	r1, [r7, #28]
 800382a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	09db      	lsrs	r3, r3, #7
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b7f      	cmp	r3, #127	; 0x7f
 800383c:	d8f0      	bhi.n	8003820 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	61fa      	str	r2, [r7, #28]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800384e:	2204      	movs	r2, #4
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	6938      	ldr	r0, [r7, #16]
 8003854:	f7ff f9bc 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f383 8811 	msr	BASEPRI, r3
}
 800385e:	bf00      	nop
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200173ac 	.word	0x200173ac
 800386c:	2001737c 	.word	0x2001737c

08003870 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003878:	f3ef 8311 	mrs	r3, BASEPRI
 800387c:	f04f 0120 	mov.w	r1, #32
 8003880:	f381 8811 	msr	BASEPRI, r1
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	481a      	ldr	r0, [pc, #104]	; (80038f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003888:	f7ff f8c9 	bl	8002a1e <_PreparePacket>
 800388c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	e00b      	b.n	80038c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	61f9      	str	r1, [r7, #28]
 80038b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	09db      	lsrs	r3, r3, #7
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b7f      	cmp	r3, #127	; 0x7f
 80038c4:	d8f0      	bhi.n	80038a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	61fa      	str	r2, [r7, #28]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80038d6:	2206      	movs	r2, #6
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	6938      	ldr	r0, [r7, #16]
 80038dc:	f7ff f978 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f383 8811 	msr	BASEPRI, r3
}
 80038e6:	bf00      	nop
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200173ac 	.word	0x200173ac
 80038f4:	2001737c 	.word	0x2001737c

080038f8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003902:	f3ef 8311 	mrs	r3, BASEPRI
 8003906:	f04f 0120 	mov.w	r1, #32
 800390a:	f381 8811 	msr	BASEPRI, r1
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	4827      	ldr	r0, [pc, #156]	; (80039b0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8003912:	f7ff f884 	bl	8002a1e <_PreparePacket>
 8003916:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	e00b      	b.n	800394a <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	1c59      	adds	r1, r3, #1
 800393a:	6279      	str	r1, [r7, #36]	; 0x24
 800393c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	09db      	lsrs	r3, r3, #7
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b7f      	cmp	r3, #127	; 0x7f
 800394e:	d8f0      	bhi.n	8003932 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	627a      	str	r2, [r7, #36]	; 0x24
 8003956:	6a3a      	ldr	r2, [r7, #32]
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	e00b      	b.n	8003982 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	1c59      	adds	r1, r3, #1
 8003972:	61f9      	str	r1, [r7, #28]
 8003974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	09db      	lsrs	r3, r3, #7
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b7f      	cmp	r3, #127	; 0x7f
 8003986:	d8f0      	bhi.n	800396a <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	61fa      	str	r2, [r7, #28]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8003998:	2207      	movs	r2, #7
 800399a:	68f9      	ldr	r1, [r7, #12]
 800399c:	6938      	ldr	r0, [r7, #16]
 800399e:	f7ff f917 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f383 8811 	msr	BASEPRI, r3
}
 80039a8:	bf00      	nop
 80039aa:	3728      	adds	r7, #40	; 0x28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200173ac 	.word	0x200173ac
 80039b4:	2001737c 	.word	0x2001737c

080039b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	089b      	lsrs	r3, r3, #2
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	2001737c 	.word	0x2001737c

080039dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	; 0x30
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80039e6:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d06d      	beq.n	8003aca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80039f4:	2300      	movs	r3, #0
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f8:	e008      	b.n	8003a0c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	3301      	adds	r3, #1
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d3f2      	bcc.n	80039fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8003a14:	e000      	b.n	8003a18 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003a16:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d055      	beq.n	8003aca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a22:	f04f 0120 	mov.w	r1, #32
 8003a26:	f381 8811 	msr	BASEPRI, r1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	482a      	ldr	r0, [pc, #168]	; (8003ad8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003a2e:	f7fe fff6 	bl	8002a1e <_PreparePacket>
 8003a32:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	e00b      	b.n	8003a5a <SEGGER_SYSVIEW_SendModule+0x7e>
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	1c59      	adds	r1, r3, #1
 8003a4a:	6279      	str	r1, [r7, #36]	; 0x24
 8003a4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	09db      	lsrs	r3, r3, #7
 8003a58:	623b      	str	r3, [r7, #32]
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a5e:	d8f0      	bhi.n	8003a42 <SEGGER_SYSVIEW_SendModule+0x66>
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	627a      	str	r2, [r7, #36]	; 0x24
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	e00b      	b.n	8003a94 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	1c59      	adds	r1, r3, #1
 8003a84:	61f9      	str	r1, [r7, #28]
 8003a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	09db      	lsrs	r3, r3, #7
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b7f      	cmp	r3, #127	; 0x7f
 8003a98:	d8f0      	bhi.n	8003a7c <SEGGER_SYSVIEW_SendModule+0xa0>
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	61fa      	str	r2, [r7, #28]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2280      	movs	r2, #128	; 0x80
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7fe ff66 	bl	8002984 <_EncodeStr>
 8003ab8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003aba:	2216      	movs	r2, #22
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	6938      	ldr	r0, [r7, #16]
 8003ac0:	f7ff f886 	bl	8002bd0 <_SendPacket>
      RECORD_END();
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003aca:	bf00      	nop
 8003acc:	3730      	adds	r7, #48	; 0x30
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200173a4 	.word	0x200173a4
 8003ad8:	200173ac 	.word	0x200173ac

08003adc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00f      	beq.n	8003b0a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f2      	bne.n	8003af0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200173a4 	.word	0x200173a4

08003b18 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b22:	f04f 0120 	mov.w	r1, #32
 8003b26:	f381 8811 	msr	BASEPRI, r1
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	4817      	ldr	r0, [pc, #92]	; (8003b8c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003b2e:	f7fe ff76 	bl	8002a1e <_PreparePacket>
 8003b32:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e00b      	b.n	8003b5c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	6179      	str	r1, [r7, #20]
 8003b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	09db      	lsrs	r3, r3, #7
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b60:	d8f0      	bhi.n	8003b44 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	617a      	str	r2, [r7, #20]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003b72:	221b      	movs	r2, #27
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	68b8      	ldr	r0, [r7, #8]
 8003b78:	f7ff f82a 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f383 8811 	msr	BASEPRI, r3
}
 8003b82:	bf00      	nop
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200173ac 	.word	0x200173ac
 8003b90:	200173a8 	.word	0x200173a8

08003b94 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8003ba0:	f04f 0120 	mov.w	r1, #32
 8003ba4:	f381 8811 	msr	BASEPRI, r1
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	4827      	ldr	r0, [pc, #156]	; (8003c48 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003bac:	f7fe ff37 	bl	8002a1e <_PreparePacket>
 8003bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003bb2:	2280      	movs	r2, #128	; 0x80
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	6938      	ldr	r0, [r7, #16]
 8003bb8:	f7fe fee4 	bl	8002984 <_EncodeStr>
 8003bbc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	e00b      	b.n	8003be0 <SEGGER_SYSVIEW_Warn+0x4c>
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	1c59      	adds	r1, r3, #1
 8003bd0:	6279      	str	r1, [r7, #36]	; 0x24
 8003bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	09db      	lsrs	r3, r3, #7
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	2b7f      	cmp	r3, #127	; 0x7f
 8003be4:	d8f0      	bhi.n	8003bc8 <SEGGER_SYSVIEW_Warn+0x34>
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	627a      	str	r2, [r7, #36]	; 0x24
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	e00b      	b.n	8003c18 <SEGGER_SYSVIEW_Warn+0x84>
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	1c59      	adds	r1, r3, #1
 8003c08:	61f9      	str	r1, [r7, #28]
 8003c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	09db      	lsrs	r3, r3, #7
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c1c:	d8f0      	bhi.n	8003c00 <SEGGER_SYSVIEW_Warn+0x6c>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	61fa      	str	r2, [r7, #28]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003c2e:	221a      	movs	r2, #26
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	6938      	ldr	r0, [r7, #16]
 8003c34:	f7fe ffcc 	bl	8002bd0 <_SendPacket>
  RECORD_END();
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f383 8811 	msr	BASEPRI, r3
}
 8003c3e:	bf00      	nop
 8003c40:	3728      	adds	r7, #40	; 0x28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200173ac 	.word	0x200173ac

08003c4c <__libc_init_array>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	4e0d      	ldr	r6, [pc, #52]	; (8003c84 <__libc_init_array+0x38>)
 8003c50:	4c0d      	ldr	r4, [pc, #52]	; (8003c88 <__libc_init_array+0x3c>)
 8003c52:	1ba4      	subs	r4, r4, r6
 8003c54:	10a4      	asrs	r4, r4, #2
 8003c56:	2500      	movs	r5, #0
 8003c58:	42a5      	cmp	r5, r4
 8003c5a:	d109      	bne.n	8003c70 <__libc_init_array+0x24>
 8003c5c:	4e0b      	ldr	r6, [pc, #44]	; (8003c8c <__libc_init_array+0x40>)
 8003c5e:	4c0c      	ldr	r4, [pc, #48]	; (8003c90 <__libc_init_array+0x44>)
 8003c60:	f000 fc44 	bl	80044ec <_init>
 8003c64:	1ba4      	subs	r4, r4, r6
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	2500      	movs	r5, #0
 8003c6a:	42a5      	cmp	r5, r4
 8003c6c:	d105      	bne.n	8003c7a <__libc_init_array+0x2e>
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c74:	4798      	blx	r3
 8003c76:	3501      	adds	r5, #1
 8003c78:	e7ee      	b.n	8003c58 <__libc_init_array+0xc>
 8003c7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c7e:	4798      	blx	r3
 8003c80:	3501      	adds	r5, #1
 8003c82:	e7f2      	b.n	8003c6a <__libc_init_array+0x1e>
 8003c84:	080046a8 	.word	0x080046a8
 8003c88:	080046a8 	.word	0x080046a8
 8003c8c:	080046a8 	.word	0x080046a8
 8003c90:	080046ac 	.word	0x080046ac

08003c94 <memcmp>:
 8003c94:	b530      	push	{r4, r5, lr}
 8003c96:	2400      	movs	r4, #0
 8003c98:	42a2      	cmp	r2, r4
 8003c9a:	d101      	bne.n	8003ca0 <memcmp+0xc>
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	e007      	b.n	8003cb0 <memcmp+0x1c>
 8003ca0:	5d03      	ldrb	r3, [r0, r4]
 8003ca2:	3401      	adds	r4, #1
 8003ca4:	190d      	adds	r5, r1, r4
 8003ca6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003caa:	42ab      	cmp	r3, r5
 8003cac:	d0f4      	beq.n	8003c98 <memcmp+0x4>
 8003cae:	1b58      	subs	r0, r3, r5
 8003cb0:	bd30      	pop	{r4, r5, pc}

08003cb2 <memcpy>:
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	1e43      	subs	r3, r0, #1
 8003cb6:	440a      	add	r2, r1
 8003cb8:	4291      	cmp	r1, r2
 8003cba:	d100      	bne.n	8003cbe <memcpy+0xc>
 8003cbc:	bd10      	pop	{r4, pc}
 8003cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cc6:	e7f7      	b.n	8003cb8 <memcpy+0x6>

08003cc8 <memset>:
 8003cc8:	4402      	add	r2, r0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d100      	bne.n	8003cd2 <memset+0xa>
 8003cd0:	4770      	bx	lr
 8003cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd6:	e7f9      	b.n	8003ccc <memset+0x4>

08003cd8 <siprintf>:
 8003cd8:	b40e      	push	{r1, r2, r3}
 8003cda:	b500      	push	{lr}
 8003cdc:	b09c      	sub	sp, #112	; 0x70
 8003cde:	ab1d      	add	r3, sp, #116	; 0x74
 8003ce0:	9002      	str	r0, [sp, #8]
 8003ce2:	9006      	str	r0, [sp, #24]
 8003ce4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ce8:	4809      	ldr	r0, [pc, #36]	; (8003d10 <siprintf+0x38>)
 8003cea:	9107      	str	r1, [sp, #28]
 8003cec:	9104      	str	r1, [sp, #16]
 8003cee:	4909      	ldr	r1, [pc, #36]	; (8003d14 <siprintf+0x3c>)
 8003cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cf4:	9105      	str	r1, [sp, #20]
 8003cf6:	6800      	ldr	r0, [r0, #0]
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	a902      	add	r1, sp, #8
 8003cfc:	f000 f866 	bl	8003dcc <_svfiprintf_r>
 8003d00:	9b02      	ldr	r3, [sp, #8]
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	b01c      	add	sp, #112	; 0x70
 8003d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d0c:	b003      	add	sp, #12
 8003d0e:	4770      	bx	lr
 8003d10:	20000018 	.word	0x20000018
 8003d14:	ffff0208 	.word	0xffff0208

08003d18 <__ssputs_r>:
 8003d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d1c:	688e      	ldr	r6, [r1, #8]
 8003d1e:	429e      	cmp	r6, r3
 8003d20:	4682      	mov	sl, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	4690      	mov	r8, r2
 8003d26:	4699      	mov	r9, r3
 8003d28:	d837      	bhi.n	8003d9a <__ssputs_r+0x82>
 8003d2a:	898a      	ldrh	r2, [r1, #12]
 8003d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d30:	d031      	beq.n	8003d96 <__ssputs_r+0x7e>
 8003d32:	6825      	ldr	r5, [r4, #0]
 8003d34:	6909      	ldr	r1, [r1, #16]
 8003d36:	1a6f      	subs	r7, r5, r1
 8003d38:	6965      	ldr	r5, [r4, #20]
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d40:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d44:	f109 0301 	add.w	r3, r9, #1
 8003d48:	443b      	add	r3, r7
 8003d4a:	429d      	cmp	r5, r3
 8003d4c:	bf38      	it	cc
 8003d4e:	461d      	movcc	r5, r3
 8003d50:	0553      	lsls	r3, r2, #21
 8003d52:	d530      	bpl.n	8003db6 <__ssputs_r+0x9e>
 8003d54:	4629      	mov	r1, r5
 8003d56:	f000 fb21 	bl	800439c <_malloc_r>
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	b950      	cbnz	r0, 8003d74 <__ssputs_r+0x5c>
 8003d5e:	230c      	movs	r3, #12
 8003d60:	f8ca 3000 	str.w	r3, [sl]
 8003d64:	89a3      	ldrh	r3, [r4, #12]
 8003d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d6a:	81a3      	strh	r3, [r4, #12]
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d74:	463a      	mov	r2, r7
 8003d76:	6921      	ldr	r1, [r4, #16]
 8003d78:	f7ff ff9b 	bl	8003cb2 <memcpy>
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d86:	81a3      	strh	r3, [r4, #12]
 8003d88:	6126      	str	r6, [r4, #16]
 8003d8a:	6165      	str	r5, [r4, #20]
 8003d8c:	443e      	add	r6, r7
 8003d8e:	1bed      	subs	r5, r5, r7
 8003d90:	6026      	str	r6, [r4, #0]
 8003d92:	60a5      	str	r5, [r4, #8]
 8003d94:	464e      	mov	r6, r9
 8003d96:	454e      	cmp	r6, r9
 8003d98:	d900      	bls.n	8003d9c <__ssputs_r+0x84>
 8003d9a:	464e      	mov	r6, r9
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	4641      	mov	r1, r8
 8003da0:	6820      	ldr	r0, [r4, #0]
 8003da2:	f000 fa93 	bl	80042cc <memmove>
 8003da6:	68a3      	ldr	r3, [r4, #8]
 8003da8:	1b9b      	subs	r3, r3, r6
 8003daa:	60a3      	str	r3, [r4, #8]
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	441e      	add	r6, r3
 8003db0:	6026      	str	r6, [r4, #0]
 8003db2:	2000      	movs	r0, #0
 8003db4:	e7dc      	b.n	8003d70 <__ssputs_r+0x58>
 8003db6:	462a      	mov	r2, r5
 8003db8:	f000 fb4a 	bl	8004450 <_realloc_r>
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d1e2      	bne.n	8003d88 <__ssputs_r+0x70>
 8003dc2:	6921      	ldr	r1, [r4, #16]
 8003dc4:	4650      	mov	r0, sl
 8003dc6:	f000 fa9b 	bl	8004300 <_free_r>
 8003dca:	e7c8      	b.n	8003d5e <__ssputs_r+0x46>

08003dcc <_svfiprintf_r>:
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	461d      	mov	r5, r3
 8003dd2:	898b      	ldrh	r3, [r1, #12]
 8003dd4:	061f      	lsls	r7, r3, #24
 8003dd6:	b09d      	sub	sp, #116	; 0x74
 8003dd8:	4680      	mov	r8, r0
 8003dda:	460c      	mov	r4, r1
 8003ddc:	4616      	mov	r6, r2
 8003dde:	d50f      	bpl.n	8003e00 <_svfiprintf_r+0x34>
 8003de0:	690b      	ldr	r3, [r1, #16]
 8003de2:	b96b      	cbnz	r3, 8003e00 <_svfiprintf_r+0x34>
 8003de4:	2140      	movs	r1, #64	; 0x40
 8003de6:	f000 fad9 	bl	800439c <_malloc_r>
 8003dea:	6020      	str	r0, [r4, #0]
 8003dec:	6120      	str	r0, [r4, #16]
 8003dee:	b928      	cbnz	r0, 8003dfc <_svfiprintf_r+0x30>
 8003df0:	230c      	movs	r3, #12
 8003df2:	f8c8 3000 	str.w	r3, [r8]
 8003df6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfa:	e0c8      	b.n	8003f8e <_svfiprintf_r+0x1c2>
 8003dfc:	2340      	movs	r3, #64	; 0x40
 8003dfe:	6163      	str	r3, [r4, #20]
 8003e00:	2300      	movs	r3, #0
 8003e02:	9309      	str	r3, [sp, #36]	; 0x24
 8003e04:	2320      	movs	r3, #32
 8003e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e0a:	2330      	movs	r3, #48	; 0x30
 8003e0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e10:	9503      	str	r5, [sp, #12]
 8003e12:	f04f 0b01 	mov.w	fp, #1
 8003e16:	4637      	mov	r7, r6
 8003e18:	463d      	mov	r5, r7
 8003e1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e1e:	b10b      	cbz	r3, 8003e24 <_svfiprintf_r+0x58>
 8003e20:	2b25      	cmp	r3, #37	; 0x25
 8003e22:	d13e      	bne.n	8003ea2 <_svfiprintf_r+0xd6>
 8003e24:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e28:	d00b      	beq.n	8003e42 <_svfiprintf_r+0x76>
 8003e2a:	4653      	mov	r3, sl
 8003e2c:	4632      	mov	r2, r6
 8003e2e:	4621      	mov	r1, r4
 8003e30:	4640      	mov	r0, r8
 8003e32:	f7ff ff71 	bl	8003d18 <__ssputs_r>
 8003e36:	3001      	adds	r0, #1
 8003e38:	f000 80a4 	beq.w	8003f84 <_svfiprintf_r+0x1b8>
 8003e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e3e:	4453      	add	r3, sl
 8003e40:	9309      	str	r3, [sp, #36]	; 0x24
 8003e42:	783b      	ldrb	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 809d 	beq.w	8003f84 <_svfiprintf_r+0x1b8>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e54:	9304      	str	r3, [sp, #16]
 8003e56:	9307      	str	r3, [sp, #28]
 8003e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8003e5e:	462f      	mov	r7, r5
 8003e60:	2205      	movs	r2, #5
 8003e62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003e66:	4850      	ldr	r0, [pc, #320]	; (8003fa8 <_svfiprintf_r+0x1dc>)
 8003e68:	f7fc f9ba 	bl	80001e0 <memchr>
 8003e6c:	9b04      	ldr	r3, [sp, #16]
 8003e6e:	b9d0      	cbnz	r0, 8003ea6 <_svfiprintf_r+0xda>
 8003e70:	06d9      	lsls	r1, r3, #27
 8003e72:	bf44      	itt	mi
 8003e74:	2220      	movmi	r2, #32
 8003e76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e7a:	071a      	lsls	r2, r3, #28
 8003e7c:	bf44      	itt	mi
 8003e7e:	222b      	movmi	r2, #43	; 0x2b
 8003e80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e84:	782a      	ldrb	r2, [r5, #0]
 8003e86:	2a2a      	cmp	r2, #42	; 0x2a
 8003e88:	d015      	beq.n	8003eb6 <_svfiprintf_r+0xea>
 8003e8a:	9a07      	ldr	r2, [sp, #28]
 8003e8c:	462f      	mov	r7, r5
 8003e8e:	2000      	movs	r0, #0
 8003e90:	250a      	movs	r5, #10
 8003e92:	4639      	mov	r1, r7
 8003e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e98:	3b30      	subs	r3, #48	; 0x30
 8003e9a:	2b09      	cmp	r3, #9
 8003e9c:	d94d      	bls.n	8003f3a <_svfiprintf_r+0x16e>
 8003e9e:	b1b8      	cbz	r0, 8003ed0 <_svfiprintf_r+0x104>
 8003ea0:	e00f      	b.n	8003ec2 <_svfiprintf_r+0xf6>
 8003ea2:	462f      	mov	r7, r5
 8003ea4:	e7b8      	b.n	8003e18 <_svfiprintf_r+0x4c>
 8003ea6:	4a40      	ldr	r2, [pc, #256]	; (8003fa8 <_svfiprintf_r+0x1dc>)
 8003ea8:	1a80      	subs	r0, r0, r2
 8003eaa:	fa0b f000 	lsl.w	r0, fp, r0
 8003eae:	4318      	orrs	r0, r3
 8003eb0:	9004      	str	r0, [sp, #16]
 8003eb2:	463d      	mov	r5, r7
 8003eb4:	e7d3      	b.n	8003e5e <_svfiprintf_r+0x92>
 8003eb6:	9a03      	ldr	r2, [sp, #12]
 8003eb8:	1d11      	adds	r1, r2, #4
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	9103      	str	r1, [sp, #12]
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	db01      	blt.n	8003ec6 <_svfiprintf_r+0xfa>
 8003ec2:	9207      	str	r2, [sp, #28]
 8003ec4:	e004      	b.n	8003ed0 <_svfiprintf_r+0x104>
 8003ec6:	4252      	negs	r2, r2
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	9207      	str	r2, [sp, #28]
 8003ece:	9304      	str	r3, [sp, #16]
 8003ed0:	783b      	ldrb	r3, [r7, #0]
 8003ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ed4:	d10c      	bne.n	8003ef0 <_svfiprintf_r+0x124>
 8003ed6:	787b      	ldrb	r3, [r7, #1]
 8003ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8003eda:	d133      	bne.n	8003f44 <_svfiprintf_r+0x178>
 8003edc:	9b03      	ldr	r3, [sp, #12]
 8003ede:	1d1a      	adds	r2, r3, #4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	9203      	str	r2, [sp, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bfb8      	it	lt
 8003ee8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eec:	3702      	adds	r7, #2
 8003eee:	9305      	str	r3, [sp, #20]
 8003ef0:	4d2e      	ldr	r5, [pc, #184]	; (8003fac <_svfiprintf_r+0x1e0>)
 8003ef2:	7839      	ldrb	r1, [r7, #0]
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7fc f972 	bl	80001e0 <memchr>
 8003efc:	b138      	cbz	r0, 8003f0e <_svfiprintf_r+0x142>
 8003efe:	2340      	movs	r3, #64	; 0x40
 8003f00:	1b40      	subs	r0, r0, r5
 8003f02:	fa03 f000 	lsl.w	r0, r3, r0
 8003f06:	9b04      	ldr	r3, [sp, #16]
 8003f08:	4303      	orrs	r3, r0
 8003f0a:	3701      	adds	r7, #1
 8003f0c:	9304      	str	r3, [sp, #16]
 8003f0e:	7839      	ldrb	r1, [r7, #0]
 8003f10:	4827      	ldr	r0, [pc, #156]	; (8003fb0 <_svfiprintf_r+0x1e4>)
 8003f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f16:	2206      	movs	r2, #6
 8003f18:	1c7e      	adds	r6, r7, #1
 8003f1a:	f7fc f961 	bl	80001e0 <memchr>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d038      	beq.n	8003f94 <_svfiprintf_r+0x1c8>
 8003f22:	4b24      	ldr	r3, [pc, #144]	; (8003fb4 <_svfiprintf_r+0x1e8>)
 8003f24:	bb13      	cbnz	r3, 8003f6c <_svfiprintf_r+0x1a0>
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	3307      	adds	r3, #7
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
 8003f2e:	3308      	adds	r3, #8
 8003f30:	9303      	str	r3, [sp, #12]
 8003f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f34:	444b      	add	r3, r9
 8003f36:	9309      	str	r3, [sp, #36]	; 0x24
 8003f38:	e76d      	b.n	8003e16 <_svfiprintf_r+0x4a>
 8003f3a:	fb05 3202 	mla	r2, r5, r2, r3
 8003f3e:	2001      	movs	r0, #1
 8003f40:	460f      	mov	r7, r1
 8003f42:	e7a6      	b.n	8003e92 <_svfiprintf_r+0xc6>
 8003f44:	2300      	movs	r3, #0
 8003f46:	3701      	adds	r7, #1
 8003f48:	9305      	str	r3, [sp, #20]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	250a      	movs	r5, #10
 8003f4e:	4638      	mov	r0, r7
 8003f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f54:	3a30      	subs	r2, #48	; 0x30
 8003f56:	2a09      	cmp	r2, #9
 8003f58:	d903      	bls.n	8003f62 <_svfiprintf_r+0x196>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0c8      	beq.n	8003ef0 <_svfiprintf_r+0x124>
 8003f5e:	9105      	str	r1, [sp, #20]
 8003f60:	e7c6      	b.n	8003ef0 <_svfiprintf_r+0x124>
 8003f62:	fb05 2101 	mla	r1, r5, r1, r2
 8003f66:	2301      	movs	r3, #1
 8003f68:	4607      	mov	r7, r0
 8003f6a:	e7f0      	b.n	8003f4e <_svfiprintf_r+0x182>
 8003f6c:	ab03      	add	r3, sp, #12
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	4622      	mov	r2, r4
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <_svfiprintf_r+0x1ec>)
 8003f74:	a904      	add	r1, sp, #16
 8003f76:	4640      	mov	r0, r8
 8003f78:	f3af 8000 	nop.w
 8003f7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f80:	4681      	mov	r9, r0
 8003f82:	d1d6      	bne.n	8003f32 <_svfiprintf_r+0x166>
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	065b      	lsls	r3, r3, #25
 8003f88:	f53f af35 	bmi.w	8003df6 <_svfiprintf_r+0x2a>
 8003f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f8e:	b01d      	add	sp, #116	; 0x74
 8003f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f94:	ab03      	add	r3, sp, #12
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4622      	mov	r2, r4
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <_svfiprintf_r+0x1ec>)
 8003f9c:	a904      	add	r1, sp, #16
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	f000 f882 	bl	80040a8 <_printf_i>
 8003fa4:	e7ea      	b.n	8003f7c <_svfiprintf_r+0x1b0>
 8003fa6:	bf00      	nop
 8003fa8:	08004672 	.word	0x08004672
 8003fac:	08004678 	.word	0x08004678
 8003fb0:	0800467c 	.word	0x0800467c
 8003fb4:	00000000 	.word	0x00000000
 8003fb8:	08003d19 	.word	0x08003d19

08003fbc <_printf_common>:
 8003fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc0:	4691      	mov	r9, r2
 8003fc2:	461f      	mov	r7, r3
 8003fc4:	688a      	ldr	r2, [r1, #8]
 8003fc6:	690b      	ldr	r3, [r1, #16]
 8003fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bfb8      	it	lt
 8003fd0:	4613      	movlt	r3, r2
 8003fd2:	f8c9 3000 	str.w	r3, [r9]
 8003fd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fda:	4606      	mov	r6, r0
 8003fdc:	460c      	mov	r4, r1
 8003fde:	b112      	cbz	r2, 8003fe6 <_printf_common+0x2a>
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f8c9 3000 	str.w	r3, [r9]
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	0699      	lsls	r1, r3, #26
 8003fea:	bf42      	ittt	mi
 8003fec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ff0:	3302      	addmi	r3, #2
 8003ff2:	f8c9 3000 	strmi.w	r3, [r9]
 8003ff6:	6825      	ldr	r5, [r4, #0]
 8003ff8:	f015 0506 	ands.w	r5, r5, #6
 8003ffc:	d107      	bne.n	800400e <_printf_common+0x52>
 8003ffe:	f104 0a19 	add.w	sl, r4, #25
 8004002:	68e3      	ldr	r3, [r4, #12]
 8004004:	f8d9 2000 	ldr.w	r2, [r9]
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	42ab      	cmp	r3, r5
 800400c:	dc28      	bgt.n	8004060 <_printf_common+0xa4>
 800400e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	3300      	adds	r3, #0
 8004016:	bf18      	it	ne
 8004018:	2301      	movne	r3, #1
 800401a:	0692      	lsls	r2, r2, #26
 800401c:	d42d      	bmi.n	800407a <_printf_common+0xbe>
 800401e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004022:	4639      	mov	r1, r7
 8004024:	4630      	mov	r0, r6
 8004026:	47c0      	blx	r8
 8004028:	3001      	adds	r0, #1
 800402a:	d020      	beq.n	800406e <_printf_common+0xb2>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	68e5      	ldr	r5, [r4, #12]
 8004030:	f8d9 2000 	ldr.w	r2, [r9]
 8004034:	f003 0306 	and.w	r3, r3, #6
 8004038:	2b04      	cmp	r3, #4
 800403a:	bf08      	it	eq
 800403c:	1aad      	subeq	r5, r5, r2
 800403e:	68a3      	ldr	r3, [r4, #8]
 8004040:	6922      	ldr	r2, [r4, #16]
 8004042:	bf0c      	ite	eq
 8004044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004048:	2500      	movne	r5, #0
 800404a:	4293      	cmp	r3, r2
 800404c:	bfc4      	itt	gt
 800404e:	1a9b      	subgt	r3, r3, r2
 8004050:	18ed      	addgt	r5, r5, r3
 8004052:	f04f 0900 	mov.w	r9, #0
 8004056:	341a      	adds	r4, #26
 8004058:	454d      	cmp	r5, r9
 800405a:	d11a      	bne.n	8004092 <_printf_common+0xd6>
 800405c:	2000      	movs	r0, #0
 800405e:	e008      	b.n	8004072 <_printf_common+0xb6>
 8004060:	2301      	movs	r3, #1
 8004062:	4652      	mov	r2, sl
 8004064:	4639      	mov	r1, r7
 8004066:	4630      	mov	r0, r6
 8004068:	47c0      	blx	r8
 800406a:	3001      	adds	r0, #1
 800406c:	d103      	bne.n	8004076 <_printf_common+0xba>
 800406e:	f04f 30ff 	mov.w	r0, #4294967295
 8004072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004076:	3501      	adds	r5, #1
 8004078:	e7c3      	b.n	8004002 <_printf_common+0x46>
 800407a:	18e1      	adds	r1, r4, r3
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	2030      	movs	r0, #48	; 0x30
 8004080:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004084:	4422      	add	r2, r4
 8004086:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800408a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800408e:	3302      	adds	r3, #2
 8004090:	e7c5      	b.n	800401e <_printf_common+0x62>
 8004092:	2301      	movs	r3, #1
 8004094:	4622      	mov	r2, r4
 8004096:	4639      	mov	r1, r7
 8004098:	4630      	mov	r0, r6
 800409a:	47c0      	blx	r8
 800409c:	3001      	adds	r0, #1
 800409e:	d0e6      	beq.n	800406e <_printf_common+0xb2>
 80040a0:	f109 0901 	add.w	r9, r9, #1
 80040a4:	e7d8      	b.n	8004058 <_printf_common+0x9c>
	...

080040a8 <_printf_i>:
 80040a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80040b0:	460c      	mov	r4, r1
 80040b2:	7e09      	ldrb	r1, [r1, #24]
 80040b4:	b085      	sub	sp, #20
 80040b6:	296e      	cmp	r1, #110	; 0x6e
 80040b8:	4617      	mov	r7, r2
 80040ba:	4606      	mov	r6, r0
 80040bc:	4698      	mov	r8, r3
 80040be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040c0:	f000 80b3 	beq.w	800422a <_printf_i+0x182>
 80040c4:	d822      	bhi.n	800410c <_printf_i+0x64>
 80040c6:	2963      	cmp	r1, #99	; 0x63
 80040c8:	d036      	beq.n	8004138 <_printf_i+0x90>
 80040ca:	d80a      	bhi.n	80040e2 <_printf_i+0x3a>
 80040cc:	2900      	cmp	r1, #0
 80040ce:	f000 80b9 	beq.w	8004244 <_printf_i+0x19c>
 80040d2:	2958      	cmp	r1, #88	; 0x58
 80040d4:	f000 8083 	beq.w	80041de <_printf_i+0x136>
 80040d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80040e0:	e032      	b.n	8004148 <_printf_i+0xa0>
 80040e2:	2964      	cmp	r1, #100	; 0x64
 80040e4:	d001      	beq.n	80040ea <_printf_i+0x42>
 80040e6:	2969      	cmp	r1, #105	; 0x69
 80040e8:	d1f6      	bne.n	80040d8 <_printf_i+0x30>
 80040ea:	6820      	ldr	r0, [r4, #0]
 80040ec:	6813      	ldr	r3, [r2, #0]
 80040ee:	0605      	lsls	r5, r0, #24
 80040f0:	f103 0104 	add.w	r1, r3, #4
 80040f4:	d52a      	bpl.n	800414c <_printf_i+0xa4>
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6011      	str	r1, [r2, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da03      	bge.n	8004106 <_printf_i+0x5e>
 80040fe:	222d      	movs	r2, #45	; 0x2d
 8004100:	425b      	negs	r3, r3
 8004102:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004106:	486f      	ldr	r0, [pc, #444]	; (80042c4 <_printf_i+0x21c>)
 8004108:	220a      	movs	r2, #10
 800410a:	e039      	b.n	8004180 <_printf_i+0xd8>
 800410c:	2973      	cmp	r1, #115	; 0x73
 800410e:	f000 809d 	beq.w	800424c <_printf_i+0x1a4>
 8004112:	d808      	bhi.n	8004126 <_printf_i+0x7e>
 8004114:	296f      	cmp	r1, #111	; 0x6f
 8004116:	d020      	beq.n	800415a <_printf_i+0xb2>
 8004118:	2970      	cmp	r1, #112	; 0x70
 800411a:	d1dd      	bne.n	80040d8 <_printf_i+0x30>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	f043 0320 	orr.w	r3, r3, #32
 8004122:	6023      	str	r3, [r4, #0]
 8004124:	e003      	b.n	800412e <_printf_i+0x86>
 8004126:	2975      	cmp	r1, #117	; 0x75
 8004128:	d017      	beq.n	800415a <_printf_i+0xb2>
 800412a:	2978      	cmp	r1, #120	; 0x78
 800412c:	d1d4      	bne.n	80040d8 <_printf_i+0x30>
 800412e:	2378      	movs	r3, #120	; 0x78
 8004130:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004134:	4864      	ldr	r0, [pc, #400]	; (80042c8 <_printf_i+0x220>)
 8004136:	e055      	b.n	80041e4 <_printf_i+0x13c>
 8004138:	6813      	ldr	r3, [r2, #0]
 800413a:	1d19      	adds	r1, r3, #4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6011      	str	r1, [r2, #0]
 8004140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004148:	2301      	movs	r3, #1
 800414a:	e08c      	b.n	8004266 <_printf_i+0x1be>
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6011      	str	r1, [r2, #0]
 8004150:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004154:	bf18      	it	ne
 8004156:	b21b      	sxthne	r3, r3
 8004158:	e7cf      	b.n	80040fa <_printf_i+0x52>
 800415a:	6813      	ldr	r3, [r2, #0]
 800415c:	6825      	ldr	r5, [r4, #0]
 800415e:	1d18      	adds	r0, r3, #4
 8004160:	6010      	str	r0, [r2, #0]
 8004162:	0628      	lsls	r0, r5, #24
 8004164:	d501      	bpl.n	800416a <_printf_i+0xc2>
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	e002      	b.n	8004170 <_printf_i+0xc8>
 800416a:	0668      	lsls	r0, r5, #25
 800416c:	d5fb      	bpl.n	8004166 <_printf_i+0xbe>
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	4854      	ldr	r0, [pc, #336]	; (80042c4 <_printf_i+0x21c>)
 8004172:	296f      	cmp	r1, #111	; 0x6f
 8004174:	bf14      	ite	ne
 8004176:	220a      	movne	r2, #10
 8004178:	2208      	moveq	r2, #8
 800417a:	2100      	movs	r1, #0
 800417c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004180:	6865      	ldr	r5, [r4, #4]
 8004182:	60a5      	str	r5, [r4, #8]
 8004184:	2d00      	cmp	r5, #0
 8004186:	f2c0 8095 	blt.w	80042b4 <_printf_i+0x20c>
 800418a:	6821      	ldr	r1, [r4, #0]
 800418c:	f021 0104 	bic.w	r1, r1, #4
 8004190:	6021      	str	r1, [r4, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d13d      	bne.n	8004212 <_printf_i+0x16a>
 8004196:	2d00      	cmp	r5, #0
 8004198:	f040 808e 	bne.w	80042b8 <_printf_i+0x210>
 800419c:	4665      	mov	r5, ip
 800419e:	2a08      	cmp	r2, #8
 80041a0:	d10b      	bne.n	80041ba <_printf_i+0x112>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	07db      	lsls	r3, r3, #31
 80041a6:	d508      	bpl.n	80041ba <_printf_i+0x112>
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	bfde      	ittt	le
 80041b0:	2330      	movle	r3, #48	; 0x30
 80041b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041ba:	ebac 0305 	sub.w	r3, ip, r5
 80041be:	6123      	str	r3, [r4, #16]
 80041c0:	f8cd 8000 	str.w	r8, [sp]
 80041c4:	463b      	mov	r3, r7
 80041c6:	aa03      	add	r2, sp, #12
 80041c8:	4621      	mov	r1, r4
 80041ca:	4630      	mov	r0, r6
 80041cc:	f7ff fef6 	bl	8003fbc <_printf_common>
 80041d0:	3001      	adds	r0, #1
 80041d2:	d14d      	bne.n	8004270 <_printf_i+0x1c8>
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	b005      	add	sp, #20
 80041da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041de:	4839      	ldr	r0, [pc, #228]	; (80042c4 <_printf_i+0x21c>)
 80041e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80041e4:	6813      	ldr	r3, [r2, #0]
 80041e6:	6821      	ldr	r1, [r4, #0]
 80041e8:	1d1d      	adds	r5, r3, #4
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6015      	str	r5, [r2, #0]
 80041ee:	060a      	lsls	r2, r1, #24
 80041f0:	d50b      	bpl.n	800420a <_printf_i+0x162>
 80041f2:	07ca      	lsls	r2, r1, #31
 80041f4:	bf44      	itt	mi
 80041f6:	f041 0120 	orrmi.w	r1, r1, #32
 80041fa:	6021      	strmi	r1, [r4, #0]
 80041fc:	b91b      	cbnz	r3, 8004206 <_printf_i+0x15e>
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	f022 0220 	bic.w	r2, r2, #32
 8004204:	6022      	str	r2, [r4, #0]
 8004206:	2210      	movs	r2, #16
 8004208:	e7b7      	b.n	800417a <_printf_i+0xd2>
 800420a:	064d      	lsls	r5, r1, #25
 800420c:	bf48      	it	mi
 800420e:	b29b      	uxthmi	r3, r3
 8004210:	e7ef      	b.n	80041f2 <_printf_i+0x14a>
 8004212:	4665      	mov	r5, ip
 8004214:	fbb3 f1f2 	udiv	r1, r3, r2
 8004218:	fb02 3311 	mls	r3, r2, r1, r3
 800421c:	5cc3      	ldrb	r3, [r0, r3]
 800421e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004222:	460b      	mov	r3, r1
 8004224:	2900      	cmp	r1, #0
 8004226:	d1f5      	bne.n	8004214 <_printf_i+0x16c>
 8004228:	e7b9      	b.n	800419e <_printf_i+0xf6>
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	6825      	ldr	r5, [r4, #0]
 800422e:	6961      	ldr	r1, [r4, #20]
 8004230:	1d18      	adds	r0, r3, #4
 8004232:	6010      	str	r0, [r2, #0]
 8004234:	0628      	lsls	r0, r5, #24
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	d501      	bpl.n	800423e <_printf_i+0x196>
 800423a:	6019      	str	r1, [r3, #0]
 800423c:	e002      	b.n	8004244 <_printf_i+0x19c>
 800423e:	066a      	lsls	r2, r5, #25
 8004240:	d5fb      	bpl.n	800423a <_printf_i+0x192>
 8004242:	8019      	strh	r1, [r3, #0]
 8004244:	2300      	movs	r3, #0
 8004246:	6123      	str	r3, [r4, #16]
 8004248:	4665      	mov	r5, ip
 800424a:	e7b9      	b.n	80041c0 <_printf_i+0x118>
 800424c:	6813      	ldr	r3, [r2, #0]
 800424e:	1d19      	adds	r1, r3, #4
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	681d      	ldr	r5, [r3, #0]
 8004254:	6862      	ldr	r2, [r4, #4]
 8004256:	2100      	movs	r1, #0
 8004258:	4628      	mov	r0, r5
 800425a:	f7fb ffc1 	bl	80001e0 <memchr>
 800425e:	b108      	cbz	r0, 8004264 <_printf_i+0x1bc>
 8004260:	1b40      	subs	r0, r0, r5
 8004262:	6060      	str	r0, [r4, #4]
 8004264:	6863      	ldr	r3, [r4, #4]
 8004266:	6123      	str	r3, [r4, #16]
 8004268:	2300      	movs	r3, #0
 800426a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800426e:	e7a7      	b.n	80041c0 <_printf_i+0x118>
 8004270:	6923      	ldr	r3, [r4, #16]
 8004272:	462a      	mov	r2, r5
 8004274:	4639      	mov	r1, r7
 8004276:	4630      	mov	r0, r6
 8004278:	47c0      	blx	r8
 800427a:	3001      	adds	r0, #1
 800427c:	d0aa      	beq.n	80041d4 <_printf_i+0x12c>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	079b      	lsls	r3, r3, #30
 8004282:	d413      	bmi.n	80042ac <_printf_i+0x204>
 8004284:	68e0      	ldr	r0, [r4, #12]
 8004286:	9b03      	ldr	r3, [sp, #12]
 8004288:	4298      	cmp	r0, r3
 800428a:	bfb8      	it	lt
 800428c:	4618      	movlt	r0, r3
 800428e:	e7a3      	b.n	80041d8 <_printf_i+0x130>
 8004290:	2301      	movs	r3, #1
 8004292:	464a      	mov	r2, r9
 8004294:	4639      	mov	r1, r7
 8004296:	4630      	mov	r0, r6
 8004298:	47c0      	blx	r8
 800429a:	3001      	adds	r0, #1
 800429c:	d09a      	beq.n	80041d4 <_printf_i+0x12c>
 800429e:	3501      	adds	r5, #1
 80042a0:	68e3      	ldr	r3, [r4, #12]
 80042a2:	9a03      	ldr	r2, [sp, #12]
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	42ab      	cmp	r3, r5
 80042a8:	dcf2      	bgt.n	8004290 <_printf_i+0x1e8>
 80042aa:	e7eb      	b.n	8004284 <_printf_i+0x1dc>
 80042ac:	2500      	movs	r5, #0
 80042ae:	f104 0919 	add.w	r9, r4, #25
 80042b2:	e7f5      	b.n	80042a0 <_printf_i+0x1f8>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1ac      	bne.n	8004212 <_printf_i+0x16a>
 80042b8:	7803      	ldrb	r3, [r0, #0]
 80042ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042c2:	e76c      	b.n	800419e <_printf_i+0xf6>
 80042c4:	08004683 	.word	0x08004683
 80042c8:	08004694 	.word	0x08004694

080042cc <memmove>:
 80042cc:	4288      	cmp	r0, r1
 80042ce:	b510      	push	{r4, lr}
 80042d0:	eb01 0302 	add.w	r3, r1, r2
 80042d4:	d807      	bhi.n	80042e6 <memmove+0x1a>
 80042d6:	1e42      	subs	r2, r0, #1
 80042d8:	4299      	cmp	r1, r3
 80042da:	d00a      	beq.n	80042f2 <memmove+0x26>
 80042dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80042e4:	e7f8      	b.n	80042d8 <memmove+0xc>
 80042e6:	4283      	cmp	r3, r0
 80042e8:	d9f5      	bls.n	80042d6 <memmove+0xa>
 80042ea:	1881      	adds	r1, r0, r2
 80042ec:	1ad2      	subs	r2, r2, r3
 80042ee:	42d3      	cmn	r3, r2
 80042f0:	d100      	bne.n	80042f4 <memmove+0x28>
 80042f2:	bd10      	pop	{r4, pc}
 80042f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80042fc:	e7f7      	b.n	80042ee <memmove+0x22>
	...

08004300 <_free_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4605      	mov	r5, r0
 8004304:	2900      	cmp	r1, #0
 8004306:	d045      	beq.n	8004394 <_free_r+0x94>
 8004308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430c:	1f0c      	subs	r4, r1, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	bfb8      	it	lt
 8004312:	18e4      	addlt	r4, r4, r3
 8004314:	f000 f8d2 	bl	80044bc <__malloc_lock>
 8004318:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <_free_r+0x98>)
 800431a:	6813      	ldr	r3, [r2, #0]
 800431c:	4610      	mov	r0, r2
 800431e:	b933      	cbnz	r3, 800432e <_free_r+0x2e>
 8004320:	6063      	str	r3, [r4, #4]
 8004322:	6014      	str	r4, [r2, #0]
 8004324:	4628      	mov	r0, r5
 8004326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800432a:	f000 b8c8 	b.w	80044be <__malloc_unlock>
 800432e:	42a3      	cmp	r3, r4
 8004330:	d90c      	bls.n	800434c <_free_r+0x4c>
 8004332:	6821      	ldr	r1, [r4, #0]
 8004334:	1862      	adds	r2, r4, r1
 8004336:	4293      	cmp	r3, r2
 8004338:	bf04      	itt	eq
 800433a:	681a      	ldreq	r2, [r3, #0]
 800433c:	685b      	ldreq	r3, [r3, #4]
 800433e:	6063      	str	r3, [r4, #4]
 8004340:	bf04      	itt	eq
 8004342:	1852      	addeq	r2, r2, r1
 8004344:	6022      	streq	r2, [r4, #0]
 8004346:	6004      	str	r4, [r0, #0]
 8004348:	e7ec      	b.n	8004324 <_free_r+0x24>
 800434a:	4613      	mov	r3, r2
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	b10a      	cbz	r2, 8004354 <_free_r+0x54>
 8004350:	42a2      	cmp	r2, r4
 8004352:	d9fa      	bls.n	800434a <_free_r+0x4a>
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	1858      	adds	r0, r3, r1
 8004358:	42a0      	cmp	r0, r4
 800435a:	d10b      	bne.n	8004374 <_free_r+0x74>
 800435c:	6820      	ldr	r0, [r4, #0]
 800435e:	4401      	add	r1, r0
 8004360:	1858      	adds	r0, r3, r1
 8004362:	4282      	cmp	r2, r0
 8004364:	6019      	str	r1, [r3, #0]
 8004366:	d1dd      	bne.n	8004324 <_free_r+0x24>
 8004368:	6810      	ldr	r0, [r2, #0]
 800436a:	6852      	ldr	r2, [r2, #4]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	4401      	add	r1, r0
 8004370:	6019      	str	r1, [r3, #0]
 8004372:	e7d7      	b.n	8004324 <_free_r+0x24>
 8004374:	d902      	bls.n	800437c <_free_r+0x7c>
 8004376:	230c      	movs	r3, #12
 8004378:	602b      	str	r3, [r5, #0]
 800437a:	e7d3      	b.n	8004324 <_free_r+0x24>
 800437c:	6820      	ldr	r0, [r4, #0]
 800437e:	1821      	adds	r1, r4, r0
 8004380:	428a      	cmp	r2, r1
 8004382:	bf04      	itt	eq
 8004384:	6811      	ldreq	r1, [r2, #0]
 8004386:	6852      	ldreq	r2, [r2, #4]
 8004388:	6062      	str	r2, [r4, #4]
 800438a:	bf04      	itt	eq
 800438c:	1809      	addeq	r1, r1, r0
 800438e:	6021      	streq	r1, [r4, #0]
 8004390:	605c      	str	r4, [r3, #4]
 8004392:	e7c7      	b.n	8004324 <_free_r+0x24>
 8004394:	bd38      	pop	{r3, r4, r5, pc}
 8004396:	bf00      	nop
 8004398:	20017490 	.word	0x20017490

0800439c <_malloc_r>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	1ccd      	adds	r5, r1, #3
 80043a0:	f025 0503 	bic.w	r5, r5, #3
 80043a4:	3508      	adds	r5, #8
 80043a6:	2d0c      	cmp	r5, #12
 80043a8:	bf38      	it	cc
 80043aa:	250c      	movcc	r5, #12
 80043ac:	2d00      	cmp	r5, #0
 80043ae:	4606      	mov	r6, r0
 80043b0:	db01      	blt.n	80043b6 <_malloc_r+0x1a>
 80043b2:	42a9      	cmp	r1, r5
 80043b4:	d903      	bls.n	80043be <_malloc_r+0x22>
 80043b6:	230c      	movs	r3, #12
 80043b8:	6033      	str	r3, [r6, #0]
 80043ba:	2000      	movs	r0, #0
 80043bc:	bd70      	pop	{r4, r5, r6, pc}
 80043be:	f000 f87d 	bl	80044bc <__malloc_lock>
 80043c2:	4a21      	ldr	r2, [pc, #132]	; (8004448 <_malloc_r+0xac>)
 80043c4:	6814      	ldr	r4, [r2, #0]
 80043c6:	4621      	mov	r1, r4
 80043c8:	b991      	cbnz	r1, 80043f0 <_malloc_r+0x54>
 80043ca:	4c20      	ldr	r4, [pc, #128]	; (800444c <_malloc_r+0xb0>)
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	b91b      	cbnz	r3, 80043d8 <_malloc_r+0x3c>
 80043d0:	4630      	mov	r0, r6
 80043d2:	f000 f863 	bl	800449c <_sbrk_r>
 80043d6:	6020      	str	r0, [r4, #0]
 80043d8:	4629      	mov	r1, r5
 80043da:	4630      	mov	r0, r6
 80043dc:	f000 f85e 	bl	800449c <_sbrk_r>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d124      	bne.n	800442e <_malloc_r+0x92>
 80043e4:	230c      	movs	r3, #12
 80043e6:	6033      	str	r3, [r6, #0]
 80043e8:	4630      	mov	r0, r6
 80043ea:	f000 f868 	bl	80044be <__malloc_unlock>
 80043ee:	e7e4      	b.n	80043ba <_malloc_r+0x1e>
 80043f0:	680b      	ldr	r3, [r1, #0]
 80043f2:	1b5b      	subs	r3, r3, r5
 80043f4:	d418      	bmi.n	8004428 <_malloc_r+0x8c>
 80043f6:	2b0b      	cmp	r3, #11
 80043f8:	d90f      	bls.n	800441a <_malloc_r+0x7e>
 80043fa:	600b      	str	r3, [r1, #0]
 80043fc:	50cd      	str	r5, [r1, r3]
 80043fe:	18cc      	adds	r4, r1, r3
 8004400:	4630      	mov	r0, r6
 8004402:	f000 f85c 	bl	80044be <__malloc_unlock>
 8004406:	f104 000b 	add.w	r0, r4, #11
 800440a:	1d23      	adds	r3, r4, #4
 800440c:	f020 0007 	bic.w	r0, r0, #7
 8004410:	1ac3      	subs	r3, r0, r3
 8004412:	d0d3      	beq.n	80043bc <_malloc_r+0x20>
 8004414:	425a      	negs	r2, r3
 8004416:	50e2      	str	r2, [r4, r3]
 8004418:	e7d0      	b.n	80043bc <_malloc_r+0x20>
 800441a:	428c      	cmp	r4, r1
 800441c:	684b      	ldr	r3, [r1, #4]
 800441e:	bf16      	itet	ne
 8004420:	6063      	strne	r3, [r4, #4]
 8004422:	6013      	streq	r3, [r2, #0]
 8004424:	460c      	movne	r4, r1
 8004426:	e7eb      	b.n	8004400 <_malloc_r+0x64>
 8004428:	460c      	mov	r4, r1
 800442a:	6849      	ldr	r1, [r1, #4]
 800442c:	e7cc      	b.n	80043c8 <_malloc_r+0x2c>
 800442e:	1cc4      	adds	r4, r0, #3
 8004430:	f024 0403 	bic.w	r4, r4, #3
 8004434:	42a0      	cmp	r0, r4
 8004436:	d005      	beq.n	8004444 <_malloc_r+0xa8>
 8004438:	1a21      	subs	r1, r4, r0
 800443a:	4630      	mov	r0, r6
 800443c:	f000 f82e 	bl	800449c <_sbrk_r>
 8004440:	3001      	adds	r0, #1
 8004442:	d0cf      	beq.n	80043e4 <_malloc_r+0x48>
 8004444:	6025      	str	r5, [r4, #0]
 8004446:	e7db      	b.n	8004400 <_malloc_r+0x64>
 8004448:	20017490 	.word	0x20017490
 800444c:	20017494 	.word	0x20017494

08004450 <_realloc_r>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	4607      	mov	r7, r0
 8004454:	4614      	mov	r4, r2
 8004456:	460e      	mov	r6, r1
 8004458:	b921      	cbnz	r1, 8004464 <_realloc_r+0x14>
 800445a:	4611      	mov	r1, r2
 800445c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004460:	f7ff bf9c 	b.w	800439c <_malloc_r>
 8004464:	b922      	cbnz	r2, 8004470 <_realloc_r+0x20>
 8004466:	f7ff ff4b 	bl	8004300 <_free_r>
 800446a:	4625      	mov	r5, r4
 800446c:	4628      	mov	r0, r5
 800446e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004470:	f000 f826 	bl	80044c0 <_malloc_usable_size_r>
 8004474:	42a0      	cmp	r0, r4
 8004476:	d20f      	bcs.n	8004498 <_realloc_r+0x48>
 8004478:	4621      	mov	r1, r4
 800447a:	4638      	mov	r0, r7
 800447c:	f7ff ff8e 	bl	800439c <_malloc_r>
 8004480:	4605      	mov	r5, r0
 8004482:	2800      	cmp	r0, #0
 8004484:	d0f2      	beq.n	800446c <_realloc_r+0x1c>
 8004486:	4631      	mov	r1, r6
 8004488:	4622      	mov	r2, r4
 800448a:	f7ff fc12 	bl	8003cb2 <memcpy>
 800448e:	4631      	mov	r1, r6
 8004490:	4638      	mov	r0, r7
 8004492:	f7ff ff35 	bl	8004300 <_free_r>
 8004496:	e7e9      	b.n	800446c <_realloc_r+0x1c>
 8004498:	4635      	mov	r5, r6
 800449a:	e7e7      	b.n	800446c <_realloc_r+0x1c>

0800449c <_sbrk_r>:
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	4c06      	ldr	r4, [pc, #24]	; (80044b8 <_sbrk_r+0x1c>)
 80044a0:	2300      	movs	r3, #0
 80044a2:	4605      	mov	r5, r0
 80044a4:	4608      	mov	r0, r1
 80044a6:	6023      	str	r3, [r4, #0]
 80044a8:	f000 f812 	bl	80044d0 <_sbrk>
 80044ac:	1c43      	adds	r3, r0, #1
 80044ae:	d102      	bne.n	80044b6 <_sbrk_r+0x1a>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	b103      	cbz	r3, 80044b6 <_sbrk_r+0x1a>
 80044b4:	602b      	str	r3, [r5, #0]
 80044b6:	bd38      	pop	{r3, r4, r5, pc}
 80044b8:	20017544 	.word	0x20017544

080044bc <__malloc_lock>:
 80044bc:	4770      	bx	lr

080044be <__malloc_unlock>:
 80044be:	4770      	bx	lr

080044c0 <_malloc_usable_size_r>:
 80044c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c4:	1f18      	subs	r0, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bfbc      	itt	lt
 80044ca:	580b      	ldrlt	r3, [r1, r0]
 80044cc:	18c0      	addlt	r0, r0, r3
 80044ce:	4770      	bx	lr

080044d0 <_sbrk>:
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <_sbrk+0x14>)
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	4602      	mov	r2, r0
 80044d6:	b909      	cbnz	r1, 80044dc <_sbrk+0xc>
 80044d8:	4903      	ldr	r1, [pc, #12]	; (80044e8 <_sbrk+0x18>)
 80044da:	6019      	str	r1, [r3, #0]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	4402      	add	r2, r0
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	4770      	bx	lr
 80044e4:	20017498 	.word	0x20017498
 80044e8:	20017548 	.word	0x20017548

080044ec <_init>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr

080044f8 <_fini>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr
